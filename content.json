{"meta":{"title":"pengpengp's BLOG","subtitle":null,"description":null,"author":"pengpengp","url":"https://pengpengp.github.io"},"pages":[],"posts":[{"title":"学习如何在linux环境安装Apache","slug":"APACHE-linux","date":"2018-12-04T12:27:34.000Z","updated":"2018-12-05T07:33:59.877Z","comments":true,"path":"2018/12/04/APACHE-linux/","link":"","permalink":"https://pengpengp.github.io/2018/12/04/APACHE-linux/","excerpt":"","text":"1.首先需要下载好安装套件（yum groupinstall “Development Tools”）然后在网上下载好apache的安装包,（这里使用下载的是源码压缩包，名字为httpd-2.4.37.tar.gz）2.把httpd-2.4.37.tar.gz传到虚拟机中，我用的是centOS7。 这里为了把文件传到linux，使用了openssh连接虚拟机 通过openssh把文件传到centOS桌面上 3.用源码方式安装httpd（apache）–step1：解压–&gt;step2：configure–&gt;解决依赖–&gt;step3：make–&gt;step4：make install，这里的详细操作步骤及我遇到的问题如下： 用tar -zxvf解压httpd-2.4.37.tar.gz，在桌面上生成了一个httpd-2.4.37 文件夹，cd进入文件夹 运行./configure –prefix=/usr/local/ 报错：依赖问题需要解决，提示的是缺少APR组件 秉承着有问题找百度的精神，我找了一篇帖子…地址 下载并解压apr-1.6.5.tar.gz apr-util-1.6.1.tar.gz 两个文件，开始安装 （这里再啰嗦一下源码文件通用的安装思路）解压文件–&gt;进入解压生成的文件夹–&gt;./configure –&gt;make&amp;&amp;make install 我在安装apr-util的时候文件损坏了，所以用yum安装了这个文件 依然要解决依赖，下载pcre-8.10.zip文件用openssh传到虚拟机（注意文件用unzip解压） 应该是缺少gcc组件yum install -y gcc gcc-c++ 问题解决 回到httpd-2.4.37文件夹，cd进入用./configure –/usr/local/命令继续安装step2的操作，再次报错./configure –prefix=/usr/local命令指定路径接下来还要重新安装apr-util-1.6.1，./configure继续报错error: APR could not be located. Please use the –with-apr option.里面说的意思应该是apr-util-1.6.1运行需要apr-1.4.5目录（也就是上一个软件安装目录）的支持所以我们执行命令[root@localhost apr-util-1.6.1]# ./configure –with-apr来执行，成功完成 回到httpd目录继续执行./configure –prefix=/usr/local/命令，继续报错。。。error1，不知道为什么，百度了半天没有头绪，我就猜是不是报错本身是错误的，所以继续输入make install，神奇的是竟然没有报错漫长的安装过程终于结束了4.关闭防火墙，启动Apache服务 centos 7关防火墙：systemctl stop firewalld; centos 6关防火墙：service iptables stop 启动Apache服务的方法：安装的根目录/usr/local/apache2/bin/apachectl start(可以再输入一次”路径 restart”) 启动Apache服务/usr/local/bin/apachectl start又报错了 这个好解决，cd进入apache目录下的htdocs目录，编辑httpd.conf文件vi conf/httpd.conf 在里面搜索#ServerName 把前面的注释符号#去掉保存 现在再次启动apache服务start``````/usr/local/bin/apachectl restart```123![apache start.jpg](APACHE-linux/apache start.jpg)### 5.输入虚拟机IP地址来试一下新建的网站吧（我在这就在虚拟机中测试一下）```[root@localhost Desktop]# curl 192.168.11.147 &lt;html&gt;&lt;body&gt;&lt;h1&gt;It works!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; 实际的图在这6.终于到了最后一步，是不是很好奇刚才打开的网页文件存放在哪儿呢？其实它就在刚才安装的根目录/usr/local/apache2/htdocs里面安静的呆着呢，试着用我们自己喜欢的网站成品文件替换index.heml，然后再次访问虚拟机的ip地址，是不是一个个人专属的Apache网站就搭建好了哈哈。日记到这里就结束了，明天继续更新","categories":[],"tags":[]},{"title":"在windows下如何开通自己的博客","slug":"first_blog","date":"2018-12-03T07:55:56.000Z","updated":"2018-12-04T10:26:31.161Z","comments":true,"path":"2018/12/03/first_blog/","link":"","permalink":"https://pengpengp.github.io/2018/12/03/first_blog/","excerpt":"","text":"先期准备工作：配置.net 安装shadowsocks（代理服务器） 1.github安装注册，下载githubDesktop（同步工具）2.下载node.js安装包node.js官网* 安装好node.js后可以cmd中运行npm试试安装成功了没 （node.js安装软件用的命令） 3.下载git（百度搜git官网）或点击git官网并在硬盘中创建一个自己博客的目录（例：c：\\blog），然后在目录中用cmd命令行安装hexo并初始化文件夹，hexo安装和文件夹初始化方法如下：* 安装hexo的方法：在文件夹地址栏中把地址改为cmd然后回车打开cmd窗口， 运行 npm install -g hexo-cli命令 安装hexo（hexo.io）（hexo是自动生成网页的工具） * 还是在d:\\blog目录打开cmd命令行输入hexo init.回车， 来初始化你博客目录 4.用VS编辑软件打开d：\\blog ,选择_config.yml，把url改成自己的博客地址 5.申请自己的博客仓库（域名）注意：必须是注册名.github.io的格式否则无法访问（www.github.com），仓库创建也可以在注册github时操作。6.利用素材生成网页文件包（即生成/public目录）；hexo目录包含三个重点文件夹：theme主题、source内容、public网站成品* cmd窗口中 执行hexo generate来生成/public文件夹（做好的网页文件夹） 然后执行hexo server 来启动你的服务器,提示hexo运行的地址localhost：4000，在浏览器中输入localhost：4000即可看到你创建的页面 7.登录gitHub desktop 客户端 克隆刚才的路径（界面最右侧有个“clone”按钮，打开选择你之前创建的域名）来下载你网页文件到本地硬盘（这里要记住保存的路径，方便之后替换）* 先用克隆的方法下载网页文件到本地路径（默认下载到我的文档中的GitHub文件夹中，有个文件夹名字是你的域名） * 打开名字是域名的文件夹，删除里面的内容（隐藏文件不要删） * 最后把之前博客目录里面的public目录文件拷贝到域名文件夹中 8.上传：这时打开hexo Desktop软件，就会提示你有变动，先保存变动（commit to master）然后上传（Fetch orgin）大家就可以通过你的域名来看你的博客了！ 附：换主题 先找一个别人做好的主题文件， 在cmd 输入 git clone“url” 下载到跟目标，把它解压到/theme文件夹中， 修改config文件theme为主题文件夹的名字，然后删除public文件夹重新生成网页文件* 删除public目录---git clear 重新生成网页文件（即public目录）---执行hexo generate 重新开启服务器 ---hexo server 9.发微博：hexo new “my new post”在/source/_post/文件夹中新建一个.md文件，用编辑软件打开这个文件就可以修改内容发表了。（发表方法见第8条的上传） 学习使用markdown语法 markdown中文文档样子","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-12-03T04:09:11.480Z","updated":"2018-12-03T04:09:11.480Z","comments":true,"path":"2018/12/03/hello-world/","link":"","permalink":"https://pengpengp.github.io/2018/12/03/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}